/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * @description generating config for nvd3 chart
 */
import { Injectable } from '@angular/core';
import { CHARTCONSTANTS } from './chart.constants';
var MatChartService = /** @class */ (function () {
    function MatChartService() {
        this.options = {
            chart: {
                type: '',
                legendPosition: "bottom",
                height: CHARTCONSTANTS.height,
                width: CHARTCONSTANTS.width,
                margin: {
                    top: 20,
                    right: 20,
                    bottom: 40,
                    left: 55
                },
                groupSpacing: 0.5,
                x: function (d) { return d.x; },
                y: function (d) { return d.y; },
                useInteractiveGuideline: false,
                showLabels: true,
                duration: 500,
                labelThreshold: 0.03,
                donut: false,
                labelType: "percent",
                xAxis: {
                    ticks: 10,
                },
                growOnHover: false,
                yAxis: {
                    ticks: 10,
                    tickFormat: function (d) {
                        return d3.format('.0')(d);
                    },
                    axisLabelDistance: -10
                },
                callback: function () {
                    d3.selectAll('.nv-pieLabels text').style('fill', 'white');
                },
                stacked: true,
                showControls: false,
                reduceXTicks: false,
                legend: {
                    rightAlign: false
                },
            },
        };
    }
    /**
     * @desc returns chart options
     * @param name
     */
    /**
     * @desc returns chart options
     * @param {?} name
     * @return {?}
     */
    MatChartService.prototype.getOptions = /**
     * @desc returns chart options
     * @param {?} name
     * @return {?}
     */
    function (name) {
        this.options.chart.type = CHARTCONSTANTS['chartType'][name] ? CHARTCONSTANTS['chartType'][name].type : '';
        this.options.chart.donut = CHARTCONSTANTS['chartType'][name] ? CHARTCONSTANTS['chartType'][name].donut : '';
        if (!this.options.chart.type) {
            return;
        }
        this.options.chart.color = function (d, i) {
            return (CHARTCONSTANTS['chartType'][name].colors[i % CHARTCONSTANTS['chartType'][name].colors.length]);
        };
        return this.options;
    };
    MatChartService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    MatChartService.ctorParameters = function () { return []; };
    return MatChartService;
}());
export { MatChartService };
if (false) {
    /** @type {?} */
    MatChartService.prototype.options;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2Rsdi1tYXRlcmlhbC8iLCJzb3VyY2VzIjpbImxpYi9jaGFydC9jaGFydC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFLQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUduRDtJQUlFO1FBQ0UsSUFBSSxDQUFDLE9BQU8sR0FBRztZQUNiLEtBQUssRUFBRTtnQkFDTCxJQUFJLEVBQUUsRUFBRTtnQkFDUixjQUFjLEVBQUUsUUFBUTtnQkFDeEIsTUFBTSxFQUFFLGNBQWMsQ0FBQyxNQUFNO2dCQUM3QixLQUFLLEVBQUUsY0FBYyxDQUFDLEtBQUs7Z0JBQzNCLE1BQU0sRUFBRTtvQkFDTixHQUFHLEVBQUUsRUFBRTtvQkFDUCxLQUFLLEVBQUUsRUFBRTtvQkFDVCxNQUFNLEVBQUUsRUFBRTtvQkFDVixJQUFJLEVBQUUsRUFBRTtpQkFDVDtnQkFDRCxZQUFZLEVBQUUsR0FBRztnQkFDakIsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQy9CLENBQUMsRUFBRSxVQUFVLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMvQix1QkFBdUIsRUFBRSxLQUFLO2dCQUM5QixVQUFVLEVBQUUsSUFBSTtnQkFDaEIsUUFBUSxFQUFFLEdBQUc7Z0JBQ2IsY0FBYyxFQUFFLElBQUk7Z0JBQ3BCLEtBQUssRUFBRSxLQUFLO2dCQUNaLFNBQVMsRUFBRSxTQUFTO2dCQUNwQixLQUFLLEVBQUU7b0JBQ0wsS0FBSyxFQUFFLEVBQUU7aUJBQ1Y7Z0JBQ0QsV0FBVyxFQUFFLEtBQUs7Z0JBQ2xCLEtBQUssRUFBRTtvQkFDTCxLQUFLLEVBQUUsRUFBRTtvQkFDVCxVQUFVLEVBQUUsVUFBVSxDQUFDO3dCQUNyQixPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzVCLENBQUM7b0JBQ0QsaUJBQWlCLEVBQUUsQ0FBQyxFQUFFO2lCQUN2QjtnQkFDRCxRQUFRLEVBQUU7b0JBQ1IsRUFBRSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQzVELENBQUM7Z0JBQ0QsT0FBTyxFQUFFLElBQUk7Z0JBQ2IsWUFBWSxFQUFFLEtBQUs7Z0JBQ25CLFlBQVksRUFBRSxLQUFLO2dCQUNuQixNQUFNLEVBQUU7b0JBQ04sVUFBVSxFQUFFLEtBQUs7aUJBQ2hCO2FBQ0o7U0FDRixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7T0FHRzs7Ozs7O0lBQ0gsb0NBQVU7Ozs7O0lBQVYsVUFBVyxJQUFJO1FBQ2IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQzFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUM1RyxJQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFDO1lBQzFCLE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxVQUFDLENBQUMsRUFBRSxDQUFDO1lBQzlCLE9BQU8sQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDekcsQ0FBQyxDQUFBO1FBQ0QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7O2dCQWhFRixVQUFVOzs7O0lBa0VYLHNCQUFDO0NBQUEsQUFsRUQsSUFrRUM7U0FqRVksZUFBZTs7O0lBQzFCLGtDQUFhIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIEBkZXNjcmlwdGlvbiBnZW5lcmF0aW5nIGNvbmZpZyBmb3IgbnZkMyBjaGFydFxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENIQVJUQ09OU1RBTlRTIH0gZnJvbSAnLi9jaGFydC5jb25zdGFudHMnO1xuXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBNYXRDaGFydFNlcnZpY2Uge1xuICBvcHRpb25zOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgY2hhcnQ6IHtcbiAgICAgICAgdHlwZTogJycsXG4gICAgICAgIGxlZ2VuZFBvc2l0aW9uOiBcImJvdHRvbVwiLFxuICAgICAgICBoZWlnaHQ6IENIQVJUQ09OU1RBTlRTLmhlaWdodCxcbiAgICAgICAgd2lkdGg6IENIQVJUQ09OU1RBTlRTLndpZHRoLFxuICAgICAgICBtYXJnaW46IHtcbiAgICAgICAgICB0b3A6IDIwLFxuICAgICAgICAgIHJpZ2h0OiAyMCxcbiAgICAgICAgICBib3R0b206IDQwLFxuICAgICAgICAgIGxlZnQ6IDU1XG4gICAgICAgIH0sXG4gICAgICAgIGdyb3VwU3BhY2luZyA6MC41LCBcbiAgICAgICAgeDogZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQueDsgfSxcbiAgICAgICAgeTogZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQueTsgfSxcbiAgICAgICAgdXNlSW50ZXJhY3RpdmVHdWlkZWxpbmU6IGZhbHNlLFxuICAgICAgICBzaG93TGFiZWxzOiB0cnVlLFxuICAgICAgICBkdXJhdGlvbjogNTAwLFxuICAgICAgICBsYWJlbFRocmVzaG9sZDogMC4wMyxcbiAgICAgICAgZG9udXQ6IGZhbHNlLFxuICAgICAgICBsYWJlbFR5cGU6IFwicGVyY2VudFwiLFxuICAgICAgICB4QXhpczoge1xuICAgICAgICAgIHRpY2tzOiAxMCxcbiAgICAgICAgfSxcbiAgICAgICAgZ3Jvd09uSG92ZXIgOmZhbHNlLFxuICAgICAgICB5QXhpczoge1xuICAgICAgICAgIHRpY2tzOiAxMCxcbiAgICAgICAgICB0aWNrRm9ybWF0OiBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgcmV0dXJuIGQzLmZvcm1hdCgnLjAnKShkKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGF4aXNMYWJlbERpc3RhbmNlOiAtMTBcbiAgICAgICAgfSxcbiAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkMy5zZWxlY3RBbGwoJy5udi1waWVMYWJlbHMgdGV4dCcpLnN0eWxlKCdmaWxsJywgJ3doaXRlJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHN0YWNrZWQ6IHRydWUsXG4gICAgICAgIHNob3dDb250cm9sczogZmFsc2UsXG4gICAgICAgIHJlZHVjZVhUaWNrczogZmFsc2UsXG4gICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgIHJpZ2h0QWxpZ246IGZhbHNlXG4gICAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzYyByZXR1cm5zIGNoYXJ0IG9wdGlvbnNcbiAgICogQHBhcmFtIG5hbWUgXG4gICAqL1xuICBnZXRPcHRpb25zKG5hbWUpIHtcbiAgICB0aGlzLm9wdGlvbnMuY2hhcnQudHlwZSA9IENIQVJUQ09OU1RBTlRTWydjaGFydFR5cGUnXVtuYW1lXSA/IENIQVJUQ09OU1RBTlRTWydjaGFydFR5cGUnXVtuYW1lXS50eXBlIDogJyc7XG4gICAgdGhpcy5vcHRpb25zLmNoYXJ0LmRvbnV0ID0gQ0hBUlRDT05TVEFOVFNbJ2NoYXJ0VHlwZSddW25hbWVdID8gQ0hBUlRDT05TVEFOVFNbJ2NoYXJ0VHlwZSddW25hbWVdLmRvbnV0IDogJyc7XG4gICAgaWYoIXRoaXMub3B0aW9ucy5jaGFydC50eXBlKXtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5vcHRpb25zLmNoYXJ0LmNvbG9yID0gKGQsIGkpID0+IHtcbiAgICAgIHJldHVybiAoQ0hBUlRDT05TVEFOVFNbJ2NoYXJ0VHlwZSddW25hbWVdLmNvbG9yc1tpICUgQ0hBUlRDT05TVEFOVFNbJ2NoYXJ0VHlwZSddW25hbWVdLmNvbG9ycy5sZW5ndGhdKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucztcbiAgfVxuXG59Il19