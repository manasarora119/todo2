/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * @description generating config for nvd3 chart
 */
import { Injectable } from '@angular/core';
import { CHARTCONSTANTS } from './chart.constants';
export class MatChartService {
    constructor() {
        this.options = {
            chart: {
                type: '',
                legendPosition: "bottom",
                height: CHARTCONSTANTS.height,
                width: CHARTCONSTANTS.width,
                margin: {
                    top: 20,
                    right: 20,
                    bottom: 40,
                    left: 55
                },
                groupSpacing: 0.5,
                x: function (d) { return d.x; },
                y: function (d) { return d.y; },
                useInteractiveGuideline: false,
                showLabels: true,
                duration: 500,
                labelThreshold: 0.03,
                donut: false,
                labelType: "percent",
                xAxis: {
                    ticks: 10,
                },
                growOnHover: false,
                yAxis: {
                    ticks: 10,
                    tickFormat: function (d) {
                        return d3.format('.0')(d);
                    },
                    axisLabelDistance: -10
                },
                callback: function () {
                    d3.selectAll('.nv-pieLabels text').style('fill', 'white');
                },
                stacked: true,
                showControls: false,
                reduceXTicks: false,
                legend: {
                    rightAlign: false
                },
            },
        };
    }
    /**
     * @desc returns chart options
     * @param {?} name
     * @return {?}
     */
    getOptions(name) {
        this.options.chart.type = CHARTCONSTANTS['chartType'][name] ? CHARTCONSTANTS['chartType'][name].type : '';
        this.options.chart.donut = CHARTCONSTANTS['chartType'][name] ? CHARTCONSTANTS['chartType'][name].donut : '';
        if (!this.options.chart.type) {
            return;
        }
        this.options.chart.color = (d, i) => {
            return (CHARTCONSTANTS['chartType'][name].colors[i % CHARTCONSTANTS['chartType'][name].colors.length]);
        };
        return this.options;
    }
}
MatChartService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
MatChartService.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    MatChartService.prototype.options;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2Rsdi1tYXRlcmlhbC8iLCJzb3VyY2VzIjpbImxpYi9jaGFydC9jaGFydC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFLQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUluRCxNQUFNLE9BQU8sZUFBZTtJQUcxQjtRQUNFLElBQUksQ0FBQyxPQUFPLEdBQUc7WUFDYixLQUFLLEVBQUU7Z0JBQ0wsSUFBSSxFQUFFLEVBQUU7Z0JBQ1IsY0FBYyxFQUFFLFFBQVE7Z0JBQ3hCLE1BQU0sRUFBRSxjQUFjLENBQUMsTUFBTTtnQkFDN0IsS0FBSyxFQUFFLGNBQWMsQ0FBQyxLQUFLO2dCQUMzQixNQUFNLEVBQUU7b0JBQ04sR0FBRyxFQUFFLEVBQUU7b0JBQ1AsS0FBSyxFQUFFLEVBQUU7b0JBQ1QsTUFBTSxFQUFFLEVBQUU7b0JBQ1YsSUFBSSxFQUFFLEVBQUU7aUJBQ1Q7Z0JBQ0QsWUFBWSxFQUFFLEdBQUc7Z0JBQ2pCLENBQUMsRUFBRSxVQUFVLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMvQixDQUFDLEVBQUUsVUFBVSxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDL0IsdUJBQXVCLEVBQUUsS0FBSztnQkFDOUIsVUFBVSxFQUFFLElBQUk7Z0JBQ2hCLFFBQVEsRUFBRSxHQUFHO2dCQUNiLGNBQWMsRUFBRSxJQUFJO2dCQUNwQixLQUFLLEVBQUUsS0FBSztnQkFDWixTQUFTLEVBQUUsU0FBUztnQkFDcEIsS0FBSyxFQUFFO29CQUNMLEtBQUssRUFBRSxFQUFFO2lCQUNWO2dCQUNELFdBQVcsRUFBRSxLQUFLO2dCQUNsQixLQUFLLEVBQUU7b0JBQ0wsS0FBSyxFQUFFLEVBQUU7b0JBQ1QsVUFBVSxFQUFFLFVBQVUsQ0FBQzt3QkFDckIsT0FBTyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUM1QixDQUFDO29CQUNELGlCQUFpQixFQUFFLENBQUMsRUFBRTtpQkFDdkI7Z0JBQ0QsUUFBUSxFQUFFO29CQUNSLEVBQUUsQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUM1RCxDQUFDO2dCQUNELE9BQU8sRUFBRSxJQUFJO2dCQUNiLFlBQVksRUFBRSxLQUFLO2dCQUNuQixZQUFZLEVBQUUsS0FBSztnQkFDbkIsTUFBTSxFQUFFO29CQUNOLFVBQVUsRUFBRSxLQUFLO2lCQUNoQjthQUNKO1NBQ0YsQ0FBQztJQUNKLENBQUM7Ozs7OztJQU1ELFVBQVUsQ0FBQyxJQUFJO1FBQ2IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQzFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUM1RyxJQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFDO1lBQzFCLE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNsQyxPQUFPLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3pHLENBQUMsQ0FBQTtRQUNELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDOzs7WUFoRUYsVUFBVTs7Ozs7O0lBRVQsa0NBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogQGRlc2NyaXB0aW9uIGdlbmVyYXRpbmcgY29uZmlnIGZvciBudmQzIGNoYXJ0XG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ0hBUlRDT05TVEFOVFMgfSBmcm9tICcuL2NoYXJ0LmNvbnN0YW50cyc7XG5cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE1hdENoYXJ0U2VydmljZSB7XG4gIG9wdGlvbnM6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICBjaGFydDoge1xuICAgICAgICB0eXBlOiAnJyxcbiAgICAgICAgbGVnZW5kUG9zaXRpb246IFwiYm90dG9tXCIsXG4gICAgICAgIGhlaWdodDogQ0hBUlRDT05TVEFOVFMuaGVpZ2h0LFxuICAgICAgICB3aWR0aDogQ0hBUlRDT05TVEFOVFMud2lkdGgsXG4gICAgICAgIG1hcmdpbjoge1xuICAgICAgICAgIHRvcDogMjAsXG4gICAgICAgICAgcmlnaHQ6IDIwLFxuICAgICAgICAgIGJvdHRvbTogNDAsXG4gICAgICAgICAgbGVmdDogNTVcbiAgICAgICAgfSxcbiAgICAgICAgZ3JvdXBTcGFjaW5nIDowLjUsIFxuICAgICAgICB4OiBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC54OyB9LFxuICAgICAgICB5OiBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC55OyB9LFxuICAgICAgICB1c2VJbnRlcmFjdGl2ZUd1aWRlbGluZTogZmFsc2UsXG4gICAgICAgIHNob3dMYWJlbHM6IHRydWUsXG4gICAgICAgIGR1cmF0aW9uOiA1MDAsXG4gICAgICAgIGxhYmVsVGhyZXNob2xkOiAwLjAzLFxuICAgICAgICBkb251dDogZmFsc2UsXG4gICAgICAgIGxhYmVsVHlwZTogXCJwZXJjZW50XCIsXG4gICAgICAgIHhBeGlzOiB7XG4gICAgICAgICAgdGlja3M6IDEwLFxuICAgICAgICB9LFxuICAgICAgICBncm93T25Ib3ZlciA6ZmFsc2UsXG4gICAgICAgIHlBeGlzOiB7XG4gICAgICAgICAgdGlja3M6IDEwLFxuICAgICAgICAgIHRpY2tGb3JtYXQ6IGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICByZXR1cm4gZDMuZm9ybWF0KCcuMCcpKGQpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgYXhpc0xhYmVsRGlzdGFuY2U6IC0xMFxuICAgICAgICB9LFxuICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGQzLnNlbGVjdEFsbCgnLm52LXBpZUxhYmVscyB0ZXh0Jykuc3R5bGUoJ2ZpbGwnLCAnd2hpdGUnKTtcbiAgICAgICAgfSxcbiAgICAgICAgc3RhY2tlZDogdHJ1ZSxcbiAgICAgICAgc2hvd0NvbnRyb2xzOiBmYWxzZSxcbiAgICAgICAgcmVkdWNlWFRpY2tzOiBmYWxzZSxcbiAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgcmlnaHRBbGlnbjogZmFsc2VcbiAgICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjIHJldHVybnMgY2hhcnQgb3B0aW9uc1xuICAgKiBAcGFyYW0gbmFtZSBcbiAgICovXG4gIGdldE9wdGlvbnMobmFtZSkge1xuICAgIHRoaXMub3B0aW9ucy5jaGFydC50eXBlID0gQ0hBUlRDT05TVEFOVFNbJ2NoYXJ0VHlwZSddW25hbWVdID8gQ0hBUlRDT05TVEFOVFNbJ2NoYXJ0VHlwZSddW25hbWVdLnR5cGUgOiAnJztcbiAgICB0aGlzLm9wdGlvbnMuY2hhcnQuZG9udXQgPSBDSEFSVENPTlNUQU5UU1snY2hhcnRUeXBlJ11bbmFtZV0gPyBDSEFSVENPTlNUQU5UU1snY2hhcnRUeXBlJ11bbmFtZV0uZG9udXQgOiAnJztcbiAgICBpZighdGhpcy5vcHRpb25zLmNoYXJ0LnR5cGUpe1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLm9wdGlvbnMuY2hhcnQuY29sb3IgPSAoZCwgaSkgPT4ge1xuICAgICAgcmV0dXJuIChDSEFSVENPTlNUQU5UU1snY2hhcnRUeXBlJ11bbmFtZV0uY29sb3JzW2kgJSBDSEFSVENPTlNUQU5UU1snY2hhcnRUeXBlJ11bbmFtZV0uY29sb3JzLmxlbmd0aF0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5vcHRpb25zO1xuICB9XG5cbn0iXX0=