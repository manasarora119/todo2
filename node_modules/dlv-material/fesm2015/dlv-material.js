import { Injectable, Component, ViewEncapsulation, Input, NgModule, ChangeDetectionStrategy, defineInjectable } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NvD3Module } from 'ng2-nvd3';
import { MatAutocompleteModule, MatBadgeModule, MatBottomSheetModule, MatButtonModule, MatButtonToggleModule, MatCardModule, MatCheckboxModule, MatChipsModule, MatDatepickerModule, MatDialogModule, MatDividerModule, MatExpansionModule, MatFormFieldModule, MatGridListModule, MatIconModule, MatInputModule, MatListModule, MatMenuModule, MatNativeDateModule, MatPaginatorModule, MatProgressBarModule, MatProgressSpinnerModule, MatRadioModule, MatRippleModule, MatSelectModule, MatSidenavModule, MatSliderModule, MatSlideToggleModule, MatSnackBarModule, MatSortModule, MatStepperModule, MatTableModule, MatTabsModule, MatToolbarModule, MatTooltipModule, MatTreeModule, MAT_DATE_LOCALE } from '@angular/material';
export { MAT_DIALOG_DATA, MatDialog, MatDialogConfig, MatDialogRef, PageEvent } from '@angular/material';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class DlvMaterialService {
    constructor() { }
}
DlvMaterialService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
DlvMaterialService.ctorParameters = () => [];
/** @nocollapse */ DlvMaterialService.ngInjectableDef = defineInjectable({ factory: function DlvMaterialService_Factory() { return new DlvMaterialService(); }, token: DlvMaterialService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class MatLabel {
    constructor() {
    }
    /**
     * @return {?}
     */
    closeHandler() { }
}
MatLabel.decorators = [
    { type: Component, args: [{
                selector: 'mat-label',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
  <span [class]="'label label-' + type ">{{label}} 
  </span>`,
                styles: [".label{margin-left:5px}.label-success{background-color:#0fb687}.label-info{background-color:#3aafd1}.label-warning{background-color:#f2b50e}.label-danger{background-color:#fa5c7c}.label-success-light{background-color:#fff;border:1px solid #0fb687;color:#0fb687;padding:2px 8px}.label-warning-light{background-color:#fff;border:1px solid #f2b50e;color:#f2b50e;padding:2px 8px}.label-info-light{background-color:#fff;border:1px solid #3aafd1;color:#3aafd1;padding:2px 8px}.label-danger-light{background-color:#fff;border:1px solid #fa5c7c;color:#fa5c7c;padding:2px 8px}"]
            }] }
];
/** @nocollapse */
MatLabel.ctorParameters = () => [];
MatLabel.propDecorators = {
    type: [{ type: Input }],
    label: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class MatLabelModule {
    /**
     * @return {?}
     */
    static forRoot() { return { ngModule: MatLabelModule, providers: [] }; }
}
MatLabelModule.decorators = [
    { type: NgModule, args: [{
                declarations: [MatLabel],
                exports: [MatLabel], imports: [CommonModule], entryComponents: [MatLabel]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
const CHARTCONSTANTS = {
    chartType: {
        pieChart: {
            type: 'pieChart',
            donut: false,
            colors: ['#1395BA', '#117899', '#0F5B78', '#0D3C55', '#C02E1D', '#D94E1F', '#F16C20', '#EF8B2C', '#ECAA38', '#EBC844', '#A2B86C', '#5CA793']
        },
        lineChart: {
            type: 'lineChart',
            donut: false,
            colors: ['#32639c', '#f5a623'],
        },
        areaChart: {
            type: 'lineChart',
            donut: false,
            colors: ['#32639c'],
        },
        donutChart: {
            type: 'pieChart',
            donut: true,
            colors: ['#01508C', '#32639C', '#5077AC', '#6A8CBC', '#84A1CD', '#9DB6DD', '#B7CDEE', '#D1E3FF']
        },
        discreteBarChart: {
            type: 'discreteBarChart',
            donut: true,
            colors: ['#01508c'],
        },
        multiBarChart: {
            type: 'multiBarChart',
            donut: false,
            colors: ['#01508C', '#5077AC', '#B7CDEE'],
        },
    },
    height: 350,
    width: 500
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class MatChartService {
    constructor() {
        this.options = {
            chart: {
                type: '',
                legendPosition: "bottom",
                height: CHARTCONSTANTS.height,
                width: CHARTCONSTANTS.width,
                margin: {
                    top: 20,
                    right: 20,
                    bottom: 40,
                    left: 55
                },
                groupSpacing: 0.5,
                x: function (d) { return d.x; },
                y: function (d) { return d.y; },
                useInteractiveGuideline: false,
                showLabels: true,
                duration: 500,
                labelThreshold: 0.03,
                donut: false,
                labelType: "percent",
                xAxis: {
                    ticks: 10,
                },
                growOnHover: false,
                yAxis: {
                    ticks: 10,
                    tickFormat: function (d) {
                        return d3.format('.0')(d);
                    },
                    axisLabelDistance: -10
                },
                callback: function () {
                    d3.selectAll('.nv-pieLabels text').style('fill', 'white');
                },
                stacked: true,
                showControls: false,
                reduceXTicks: false,
                legend: {
                    rightAlign: false
                },
            },
        };
    }
    /**
     * @desc returns chart options
     * @param {?} name
     * @return {?}
     */
    getOptions(name) {
        this.options.chart.type = CHARTCONSTANTS['chartType'][name] ? CHARTCONSTANTS['chartType'][name].type : '';
        this.options.chart.donut = CHARTCONSTANTS['chartType'][name] ? CHARTCONSTANTS['chartType'][name].donut : '';
        if (!this.options.chart.type) {
            return;
        }
        this.options.chart.color = (d, i) => {
            return (CHARTCONSTANTS['chartType'][name].colors[i % CHARTCONSTANTS['chartType'][name].colors.length]);
        };
        return this.options;
    }
}
MatChartService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
MatChartService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class MatChart {
    /**
     * @param {?} chartService
     */
    constructor(chartService) {
        this.chartService = chartService;
        this.hideLabelsOptions = {};
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if ((!this.type)) {
            throw new Error('Chart type required.');
        }
        if (!this.options) {
            this.options = this.chartService.getOptions(this.type);
        }
        if (this.colors) {
            this.options.chart.color = (d, i) => {
                return (this.colors && this.colors[i % this.colors.length]);
            };
        }
    }
}
MatChart.decorators = [
    { type: Component, args: [{
                selector: 'mat-chart',
                template: "<div class=\"row\" [class]=\"customClass\" [ngClass]=\"  {'initialX':hideLabelsOptions['initialX'], 'initialY': hideLabelsOptions['initialY'], 'endX': hideLabelsOptions['endX'] ,'endY' :hideLabelsOptions['endY'] }\">\n    <nvd3 [options]=\"options\" [data]=\"data\" *ngIf=\"type!='progressChart'\"></nvd3>\n</div>",
                providers: [MatChartService],
                encapsulation: ViewEncapsulation.None,
                styles: [".nv-axis.nv-x .tick line{display:none}.nv-axis line{stroke:rgba(216,216,216,.4)!important}.nv-y .nv-axis g path.domain{stroke:none}.endX .nvd3 .nv-axis g .nv-axisMax-x text,.endY .nvd3 .nv-axis g .nv-axisMax-y text,.initialX .nvd3 .nv-axis g .nv-axisMin-x text,.initialY .nvd3 .nv-axis g .nv-axisMin-y text{fill:transparent!important}.nvd3 .nv-axis.nv-x text,.nvd3 .nv-axis.nv-y text{font-size:10px;fill:#d8d8d8!important;font-family:OpenSans-Semibold}.nvd3.nv-pie path{fill-opacity:1!important;stroke:rgba(255,255,255,.4)!important}.nvd3 .nv-groups path.nv-area{stroke:none}.nvd3 .nv-legend text{fill:#262727;font-size:12px;font-family:OpenSans-Regular}.nvd3 .nv-legend .nv-legend-symbol{stroke-width:1!important}.nv-line .nv-group{stroke-width:1!important;fill-opacity:.2!important}.nv-discretebar .nv-groups rect{fill-opacity:1}.nv-multiBarWithLegend .nv-multibar .nv-groups .nv-group{fill-opacity:1!important}.nvtooltip.xy-tooltip{background-color:rgba(72,84,101,.9);color:#9cafc3;border:none;border-radius:0;-webkit-transform:none;transform:none}.nvtooltip.xy-tooltip table thead tr td{text-align:center!important}.nvtooltip.xy-tooltip table thead tr td strong{color:rgba(255,255,255,.4);font-size:14px;font-weight:400}.nvtooltip.xy-tooltip table tbody tr td.legend-color-guide div{display:none;font-size:10px;color:#9cafc3}.nvtooltip.xy-tooltip table tbody tr td.value{color:#fff}dlv-progressbarchart .progress{border-radius:18px!important}dlv-progressbarchart .progress div{border-right:1px solid #fff}dlv-progressbarchart .progress div:last-child{border-right:none}", ".nvd3 .nv-axis{pointer-events:none;opacity:1}.nvd3 .nv-axis path{fill:none;stroke:#000;stroke-opacity:.75;shape-rendering:crispEdges}.nvd3 .nv-axis path.domain{stroke-opacity:.75}.nvd3 .nv-axis.nv-x path.domain{stroke-opacity:0}.nvd3 .nv-axis line{fill:none;stroke:#e5e5e5;shape-rendering:crispEdges}.nvd3 .nv-axis .zero line,.nvd3 .nv-axis line.zero{stroke-opacity:.75}.nvd3 .nv-axis .nv-axisMaxMin text{font-weight:700}.nvd3 .x .nv-axis .nv-axisMaxMin text,.nvd3 .x2 .nv-axis .nv-axisMaxMin text,.nvd3 .x3 .nv-axis .nv-axisMaxMin text{text-anchor:middle}.nvd3 .nv-axis.nv-disabled{opacity:0}.nvd3 .nv-bars rect{fill-opacity:.75;transition:fill-opacity 250ms linear}.nvd3 .nv-bars rect.hover{fill-opacity:1}.nvd3 .nv-bars .hover rect{fill:#add8e6}.nvd3 .nv-bars text{fill:transparent}.nvd3 .nv-bars .hover text{fill:rgba(0,0,0,1)}.nvd3 .nv-discretebar .nv-groups rect,.nvd3 .nv-multibar .nv-groups rect,.nvd3 .nv-multibarHorizontal .nv-groups rect{stroke-opacity:0;transition:fill-opacity 250ms linear}.nvd3 .nv-candlestickBar .nv-ticks rect:hover,.nvd3 .nv-discretebar .nv-groups rect:hover,.nvd3 .nv-multibar .nv-groups rect:hover,.nvd3 .nv-multibarHorizontal .nv-groups rect:hover{fill-opacity:1}.nvd3 .nv-discretebar .nv-groups text,.nvd3 .nv-multibarHorizontal .nv-groups text{font-weight:700;fill:rgba(0,0,0,1);stroke:transparent}.nvd3 .nv-boxplot circle{fill-opacity:.5}.nvd3 .nv-boxplot circle:hover,.nvd3 .nv-boxplot rect:hover{fill-opacity:1}.nvd3 line.nv-boxplot-median{stroke:#000}.nv-boxplot-tick:hover{stroke-width:2.5px}.nvd3.nv-bullet{font:10px sans-serif}.nvd3.nv-bullet .nv-measure{fill-opacity:.8}.nvd3.nv-bullet .nv-measure:hover{fill-opacity:1}.nvd3.nv-bullet .nv-marker{stroke:#000;stroke-width:2px}.nvd3.nv-bullet .nv-markerTriangle{stroke:#000;fill:#fff;stroke-width:1.5px}.nvd3.nv-bullet .nv-markerLine{stroke:#000;stroke-width:1.5px}.nvd3.nv-bullet .nv-tick line{stroke:#666;stroke-width:.5px}.nvd3.nv-bullet .nv-range.nv-s0{fill:#eee}.nvd3.nv-bullet .nv-range.nv-s1{fill:#ddd}.nvd3.nv-bullet .nv-range.nv-s2{fill:#ccc}.nvd3.nv-bullet .nv-title{font-size:14px;font-weight:700}.nvd3.nv-bullet .nv-subtitle{fill:#999}.nvd3.nv-bullet .nv-range{fill:#bababa;fill-opacity:.4}.nvd3.nv-bullet .nv-range:hover{fill-opacity:.7}.nvd3.nv-candlestickBar .nv-ticks .nv-tick{stroke-width:1px}.nvd3.nv-candlestickBar .nv-ticks .nv-tick.hover{stroke-width:2px}.nvd3.nv-candlestickBar .nv-ticks .nv-tick.positive rect{stroke:#2ca02c;fill:#2ca02c}.nvd3.nv-candlestickBar .nv-ticks .nv-tick.negative rect{stroke:#d62728;fill:#d62728}.with-transitions .nv-candlestickBar .nv-ticks .nv-tick{transition:stroke-width 250ms linear,stroke-opacity 250ms linear}.nvd3.nv-candlestickBar .nv-ticks line{stroke:#333}.nv-force-node{stroke:#fff;stroke-width:1.5px}.nv-force-link{stroke:#999;stroke-opacity:.6}.nv-force-node text{stroke-width:0}.nvd3 .nv-check-box .nv-box{fill-opacity:0;stroke-width:2}.nvd3 .nv-check-box .nv-check{fill-opacity:0;stroke-width:4}.nvd3 .nv-series.nv-disabled .nv-check-box .nv-check{fill-opacity:0;stroke-opacity:0}.nvd3 .nv-controlsWrap .nv-legend .nv-check-box .nv-check{opacity:0}.nvd3.nv-linePlusBar .nv-bar rect{fill-opacity:.75}.nvd3.nv-linePlusBar .nv-bar rect:hover{fill-opacity:1}.nvd3 .nv-groups path.nv-line{fill:none}.nvd3 .nv-groups path.nv-area{stroke:none}.nvd3.nv-line .nvd3.nv-scatter .nv-groups .nv-point{fill-opacity:0;stroke-opacity:0}.nvd3.nv-scatter.nv-single-point .nv-groups .nv-point{fill-opacity:.5!important;stroke-opacity:.5!important}.with-transitions .nvd3 .nv-groups .nv-point{transition:stroke-width 250ms linear,stroke-opacity 250ms linear}.nvd3 .nv-groups .nv-point.hover,.nvd3.nv-scatter .nv-groups .nv-point.hover{stroke-width:7px;fill-opacity:.95!important;stroke-opacity:.95!important}.nvd3 .nv-point-paths path{stroke:#aaa;stroke-opacity:0;fill:#eee;fill-opacity:0}.nvd3 .nv-indexLine{cursor:ew-resize}svg.nvd3-svg{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:block;width:100%;height:100%}.nvtooltip.with-3d-shadow,.with-3d-shadow .nvtooltip{box-shadow:0 5px 10px rgba(0,0,0,.2);border-radius:5px}.nvd3 text{font:12px Arial,sans-serif}.nvd3 .title{font:bold 14px Arial,sans-serif}.nvd3 .nv-background{fill:#fff;fill-opacity:0}.nvd3.nv-noData{font-size:18px;font-weight:700}.nv-brush .extent{fill-opacity:.125;shape-rendering:crispEdges}.nv-brush .resize path{fill:#eee;stroke:#666}.nvd3 .nv-legend .nv-series{cursor:pointer}.nvd3 .nv-legend .nv-disabled circle{fill-opacity:0}.nvd3 .nv-brush .extent{fill-opacity:0!important}.nvd3 .nv-brushBackground rect{stroke:#000;stroke-width:.4;fill:#fff;fill-opacity:.7}@media print{.nvd3 text{stroke-width:0;fill-opacity:1}}.nvd3.nv-ohlcBar .nv-ticks .nv-tick{stroke-width:1px}.nvd3.nv-ohlcBar .nv-ticks .nv-tick.hover{stroke-width:2px}.nvd3.nv-ohlcBar .nv-ticks .nv-tick.positive{stroke:#2ca02c}.nvd3.nv-ohlcBar .nv-ticks .nv-tick.negative{stroke:#d62728}.nvd3 .background path{fill:none;stroke:#eee;stroke-opacity:.4;shape-rendering:crispEdges}.nvd3 .foreground path{fill:none;stroke-opacity:.7}.nvd3 .nv-parallelCoordinates-brush .extent{fill:#fff;fill-opacity:.6;stroke:gray;shape-rendering:crispEdges}.nvd3 .nv-parallelCoordinates .hover{fill-opacity:1;stroke-width:3px}.nvd3 .missingValuesline line{fill:none;stroke:#000;stroke-width:1;stroke-opacity:1;stroke-dasharray:5,5}.nvd3.nv-pie path{stroke-opacity:0;transition:fill-opacity 250ms linear,stroke-width 250ms linear,stroke-opacity 250ms linear;stroke:#fff;stroke-width:1px;stroke-opacity:1;fill-opacity:.7}.nvd3.nv-pie .nv-pie-title{font-size:24px;fill:rgba(19,196,249,.59)}.nvd3.nv-pie .nv-slice text{stroke:#000;stroke-width:0}.nvd3.nv-pie .hover path{fill-opacity:1}.nvd3.nv-pie .nv-label{pointer-events:none}.nvd3.nv-pie .nv-label rect{fill-opacity:0;stroke-opacity:0}.nvd3 .nv-groups .nv-point.hover{stroke-width:20px;stroke-opacity:.5}.nvd3 .nv-scatter .nv-point.hover{fill-opacity:1}.nv-distx,.nv-disty,.nv-noninteractive{pointer-events:none}.nvd3.nv-sparkline path{fill:none}.nvd3.nv-sparklineplus g.nv-hoverValue{pointer-events:none}.nvd3.nv-sparklineplus .nv-hoverValue line{stroke:#333;stroke-width:1.5px}.nvd3.nv-sparklineplus,.nvd3.nv-sparklineplus g{pointer-events:all}.nvd3 .nv-hoverArea{fill-opacity:0;stroke-opacity:0}.nvd3.nv-sparklineplus .nv-xValue,.nvd3.nv-sparklineplus .nv-yValue{stroke-width:0;font-size:.9em;font-weight:400}.nvd3.nv-sparklineplus .nv-yValue{stroke:#f66}.nvd3.nv-sparklineplus .nv-maxValue{stroke:#2ca02c;fill:#2ca02c}.nvd3.nv-sparklineplus .nv-minValue{stroke:#d62728;fill:#d62728}.nvd3.nv-sparklineplus .nv-currentValue{font-weight:700;font-size:1.1em}.nvd3.nv-stackedarea path.nv-area{fill-opacity:.7;stroke-opacity:0;transition:fill-opacity 250ms linear,stroke-opacity 250ms linear}.nvd3.nv-stackedarea path.nv-area.hover{fill-opacity:.9}.nvd3.nv-stackedarea .nv-groups .nv-point{stroke-opacity:0;fill-opacity:0}.nvtooltip{position:absolute;color:rgba(0,0,0,1);padding:1px;border:1px solid rgba(0,0,0,.5);z-index:10000;display:block;font-family:Arial,sans-serif;font-size:13px;text-align:left;pointer-events:none;white-space:nowrap;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background:rgba(255,255,255,.8);border-radius:4px}.nvtooltip.with-transitions,.with-transitions .nvtooltip{transition:opacity 50ms linear .2s}.nvtooltip.x-nvtooltip,.nvtooltip.y-nvtooltip{padding:8px}.nvtooltip h3{margin:0;padding:4px 14px;line-height:18px;font-weight:400;background-color:rgba(247,247,247,.75);color:rgba(0,0,0,1);text-align:center;border-bottom:1px solid #ebebeb;border-radius:5px 5px 0 0}.nvtooltip p{margin:0;padding:5px 14px;text-align:center}.nvtooltip span{display:inline-block;margin:2px 0}.nvtooltip table{margin:6px;border-spacing:0}.nvtooltip table td{padding:2px 9px 2px 0;vertical-align:middle}.nvtooltip table td.key{font-weight:400}.nvtooltip table td.key.total{font-weight:700}.nvtooltip table td.value{text-align:right;font-weight:700}.nvtooltip table td.percent{color:#a9a9a9}.nvtooltip table tr.highlight td{padding:1px 9px 1px 0;border-bottom-style:solid;border-bottom-width:1px;border-top-style:solid;border-top-width:1px}.nvtooltip table td.legend-color-guide div{vertical-align:middle;width:12px;height:12px;border:1px solid #999}.nvtooltip .footer{padding:3px;text-align:center}.nvtooltip-pending-removal{pointer-events:none;display:none}.nvd3 .nv-interactiveGuideLine{pointer-events:none}.nvd3 line.nv-guideline{stroke:#ccc}"]
            }] }
];
/** @nocollapse */
MatChart.ctorParameters = () => [
    { type: MatChartService }
];
MatChart.propDecorators = {
    options: [{ type: Input }],
    type: [{ type: Input }],
    data: [{ type: Input }],
    colors: [{ type: Input }],
    customClass: [{ type: Input }],
    hideLabelsOptions: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class MatChartModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: MatChartModule, };
    }
}
MatChartModule.decorators = [
    { type: NgModule, args: [{ declarations: [MatChart], exports: [MatChart], imports: [NvD3Module, CommonModule], },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
let MODULES = [
    MatAutocompleteModule,
    MatBadgeModule,
    MatBottomSheetModule,
    MatButtonModule,
    MatButtonToggleModule,
    MatCardModule,
    MatCheckboxModule,
    MatChipsModule,
    MatTableModule,
    MatDatepickerModule,
    MatDialogModule,
    MatDividerModule,
    MatExpansionModule,
    MatFormFieldModule,
    MatGridListModule,
    MatIconModule,
    MatInputModule,
    MatListModule,
    MatMenuModule,
    MatPaginatorModule,
    MatProgressBarModule,
    MatProgressSpinnerModule,
    MatRadioModule,
    MatRippleModule,
    MatSelectModule,
    MatSidenavModule,
    MatSlideToggleModule,
    MatSliderModule,
    MatSnackBarModule,
    MatSortModule,
    MatStepperModule,
    MatTabsModule,
    MatToolbarModule,
    MatTooltipModule,
    MatTreeModule,
    MatNativeDateModule,
    MatLabelModule,
    MatChartModule
];
class DLVMaterialModule {
}
DLVMaterialModule.decorators = [
    { type: NgModule, args: [{
                imports: [...MODULES],
                exports: [...MODULES],
                providers: [
                    { provide: MAT_DATE_LOCALE, useValue: 'en-IN' }
                ],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { DlvMaterialService, DLVMaterialModule, MatChart as ɵd, MatChartModule as ɵc, MatChartService as ɵe, MatLabel as ɵb, MatLabelModule as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,