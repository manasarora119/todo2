{"version":3,"file":"http.service.js","sourceRoot":"","sources":["../../../tmp/src-inlined/shared/services/http.service.ts"],"names":[],"mappings":";;;;;;;;;AACA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,UAAU,EAAE,UAAU,EAAgB,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AAC/F,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAIlC;IAEI,wBACY,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IACxB,CAAC;IAGL,oCAAW,GAAX,UAAY,MAAM;QACd,IAAM,WAAW,GAAG,EAAE,CAAC;QAEvB,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,EAAE;YAC9B,WAAW,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC;SACzC;QAED,IAAI,MAAM,CAAC,OAAO,CAAC,EAAE;YACjB,WAAW,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;SAC7D;QAED,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE;YAChB,WAAW,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;SACxC;QAED,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;IACrE,CAAC;IAGO,oCAAW,GAAnB,UAAoB,GAAW;QAC3B,IAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,GAAG;YAC5C,GAAG,CAAC,IAAI,CAAI,GAAG,SAAI,kBAAkB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC,CAAC;YACnD,OAAO,GAAG,CAAC;QACf,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEjB,OAAO,IAAI,UAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC,CAAC;IAClD,CAAC;IAED,oCAAW,GAAX,UAAY,KAAwB;QAChC,IAAI,MAAc,CAAC;QACnB,IAAI,KAAK,YAAY,iBAAiB,EAAE;YACpC,IAAM,IAAI,GAAG,KAAK,IAAI,EAAE,CAAC;YACzB,IAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAClD,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC;SAC1B;aAAM;YACH,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;SACxD;QACD,OAAO,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IAED;;;;;;;QAOI;IACJ,qCAAY,GAAZ,UAAa,GAAsB;QAC/B,IAAM,IAAI,GAAG,GAAG,CAAC;QACjB,OAAO,IAAI,IAAI,EAAE,CAAC;IACtB,CAAC;IA1DQ,cAAc;QAF1B,UAAU,EAAE;yCAKS,UAAU;OAHnB,cAAc,CA2D1B;IAAD,qBAAC;CAAA,AA3DD,IA2DC;SA3DY,cAAc","sourcesContent":["\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams, HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\n\nexport class DlvHttpService {\n\n    constructor(\n        private http: HttpClient\n    ) { }\n\n\n    httpRequest(config) {\n        const httpOptions = {};\n\n        if (!config['skipAuthorization']) {\n            httpOptions['withCredentials'] = true;\n        }\n\n        if (config['query']) {\n            httpOptions['params'] = this.queryParams(config['query']);\n        }\n\n        if (config['body']) {\n            httpOptions['body'] = config['body'];\n        }\n\n        return this.http.request(config.method, config.url, httpOptions);\n    }\n\n\n    private queryParams(obj: Object) {\n        const params = Object.keys(obj).reduce((val, key) => {\n            val.push(`${key}=${encodeURIComponent(obj[key])}`);\n            return val;\n        }, []).join('&');\n\n        return new HttpParams({ fromString: params });\n    }\n\n    handleError(error: HttpErrorResponse) {\n        let errMsg: string;\n        if (error instanceof HttpErrorResponse) {\n            const body = error || '';\n            const err = body['error'] || JSON.stringify(body);\n            errMsg = error.message;\n        } else {\n            errMsg = error['message'] ? error['message'] : error;\n        }\n        return Observable.throw(errMsg);\n    }\n\n    /**\n     * @name response\n     * @scope private\n     *\n     * @description\n     * Read response and convert it to JSON.\n     *\n     **/\n    responseData(res: HttpResponse<any>) {\n        const body = res;\n        return body || {};\n    }\n}\n\n\n\n"]}