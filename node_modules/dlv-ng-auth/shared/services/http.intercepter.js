var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { HttpResponse, } from '@angular/common/http';
import { Observable } from 'rxjs';
import 'rxjs/add/operator/do';
import { AuthDetailsService } from './auth-details.service';
var DlvHttpInterceptor = /** @class */ (function () {
    function DlvHttpInterceptor(authDetailsService) {
        var _this = this;
        this.authDetailsService = authDetailsService;
        /**
         * To set request header
         * @param req : HttpRequest
         */
        this.setReqHeader = function (req) {
            /**
             * For default UMS token set
             */
            var setHeaders = {};
            if (req.headers['headers'] && req.headers['headers'].size < 1 && !req['notHeader']) {
                setHeaders['Content-Type'] = 'application/json';
            }
            if (req.withCredentials || typeof req.withCredentials !== 'boolean') {
                var tokenPrefix = void 0;
                var tokenPrefixName = _this.authDetailsService.getAuthConstants()['tokenPrefixName'];
                var isBoolean = typeof tokenPrefixName === 'boolean';
                if (isBoolean) {
                    tokenPrefix = tokenPrefixName === false
                        ? '' : tokenPrefixName === true
                        ? 'Bearer ' : '';
                }
                else {
                    tokenPrefix = tokenPrefixName ? tokenPrefixName + " " : 'Bearer ';
                }
                setHeaders['Authorization'] = "" + tokenPrefix + _this.authDetailsService.getJWT();
                req.withCredentials = false;
            }
            return setHeaders;
        };
    }
    DlvHttpInterceptor.prototype.intercept = function (req, next) {
        var _this = this;
        if (this.beforeRequest() || (req && typeof req.withCredentials === 'boolean' && !req.withCredentials)) {
            var request = req;
            if (this.authDetailsService.getAuthConstants()['interceptRequests']) {
                request = req.clone({
                    setHeaders: this.setReqHeader(req)
                });
            }
            this.updateBody(request);
            return next.handle(request)
                .do(function (event) {
                if (event instanceof HttpResponse) {
                    return event;
                }
            }, function (error) {
                _this.catchErrors(error);
                return error;
            });
        }
        else {
            return Observable.throw('You are not authorized');
        }
    };
    /**
     * To update body
     * @param request : HttpRequest
     */
    DlvHttpInterceptor.prototype.updateBody = function (request) {
        var bodyParams = this.authDetailsService.getAuthConstants()['bodyParams'];
        if (['GET', 'DELETE'].indexOf(request['method']) <= -1 &&
            bodyParams &&
            Object.keys(bodyParams).length) {
            request['body'] = request['body'] ? request['body'] : {};
            Object.assign(request['body'], bodyParams);
        }
    };
    /**
     * To andle request error
     * @param error
     */
    DlvHttpInterceptor.prototype.catchErrors = function (error) {
        switch (error['status']) {
            case 403:
                this.authDetailsService.call403();
                break;
            case 401:
                this.authDetailsService.call401();
                break;
            default:
                break;
        }
    };
    DlvHttpInterceptor.prototype.beforeRequest = function () {
        if (!this.authDetailsService.isAuthenticated()) {
            this.authDetailsService.setCallBackUrl(window.location.href && window.location.href.split('#')[0]);
            this.authDetailsService.setOn401();
            return false;
        }
        else {
            return true;
        }
    };
    DlvHttpInterceptor = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [AuthDetailsService])
    ], DlvHttpInterceptor);
    return DlvHttpInterceptor;
}());
export { DlvHttpInterceptor };
//# sourceMappingURL=http.intercepter.js.map