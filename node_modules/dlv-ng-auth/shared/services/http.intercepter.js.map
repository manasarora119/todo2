{"version":3,"file":"http.intercepter.js","sourceRoot":"","sources":["../../../tmp/src-inlined/shared/services/http.intercepter.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAKH,YAAY,GAGf,MAAM,sBAAsB,CAAC;AAC9B,OAAO,EAAE,UAAU,EAAc,MAAM,MAAM,CAAC;AAC9C,OAAO,sBAAsB,CAAC;AAC9B,OAAO,EAAE,kBAAkB,EAAE,MAAM,wBAAwB,CAAC;AAK5D;IAII,4BAAoB,kBAAsC;QAA1D,iBAA+D;QAA3C,uBAAkB,GAAlB,kBAAkB,CAAoB;QAgE1D;;;WAGG;QACK,iBAAY,GAAG,UAAC,GAAI;YACxB;;eAEG;YAEH,IAAM,UAAU,GAAG,EAAE,CAAC;YAEtB,IAAI,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE;gBAChF,UAAU,CAAC,cAAc,CAAC,GAAG,kBAAkB,CAAC;aACnD;YAED,IAAI,GAAG,CAAC,eAAe,IAAI,OAAO,GAAG,CAAC,eAAe,KAAK,SAAS,EAAE;gBACjE,IAAI,WAAW,SAAA,CAAC;gBAChB,IAAM,eAAe,GAAG,KAAI,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,CAAC,iBAAiB,CAAC,CAAC;gBACtF,IAAM,SAAS,GAAG,OAAO,eAAe,KAAK,SAAS,CAAC;gBAEvD,IAAI,SAAS,EAAE;oBACX,WAAW,GAAG,eAAe,KAAK,KAAK;wBACnC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,eAAe,KAAK,IAAI;wBAC/B,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC;iBACxB;qBAAM;oBACH,WAAW,GAAG,eAAe,CAAC,CAAC,CAAI,eAAe,MAAG,CAAC,CAAC,CAAC,SAAS,CAAC;iBACrE;gBAED,UAAU,CAAC,eAAe,CAAC,GAAG,KAAG,WAAW,GAAG,KAAI,CAAC,kBAAkB,CAAC,MAAM,EAAI,CAAC;gBAClF,GAAG,CAAC,eAAe,GAAG,KAAK,CAAC;aAC/B;YACD,OAAO,UAAU,CAAC;QAEtB,CAAC,CAAA;IAjG6D,CAAC;IAE/D,sCAAS,GAAT,UAAU,GAAqB,EAAE,IAAiB;QAAlD,iBAwBC;QAvBG,IAAI,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,GAAG,IAAI,OAAO,GAAG,CAAC,eAAe,KAAK,SAAS,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE;YACnG,IAAI,OAAO,GAAG,GAAG,CAAC;YAClB,IAAI,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,CAAC,mBAAmB,CAAC,EAAE;gBACjE,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC;oBAChB,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC;iBACrC,CAAC,CAAC;aAEN;YAED,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YAEzB,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;iBACtB,EAAE,CAAC,UAAC,KAAqB;gBACtB,IAAI,KAAK,YAAY,YAAY,EAAE;oBAC/B,OAAO,KAAK,CAAC;iBAChB;YACL,CAAC,EAAE,UAAC,KAAU;gBACV,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBACxB,OAAO,KAAK,CAAC;YACjB,CAAC,CAAC,CAAC;SACV;aAAM;YACH,OAAO,UAAU,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;SACrD;IACL,CAAC;IAED;;;OAGG;IACK,uCAAU,GAAlB,UAAmB,OAAO;QACtB,IAAM,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,CAAC,YAAY,CAAC,CAAC;QAE5E,IACI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC;YAClD,UAAU;YACV,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,EAChC;YACE,OAAO,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YACzD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,UAAU,CAAC,CAAC;SAC9C;IAEL,CAAC;IAED;;;OAGG;IACK,wCAAW,GAAnB,UAAoB,KAAK;QAErB,QAAQ,KAAK,CAAC,QAAQ,CAAC,EAAE;YACrB,KAAK,GAAG;gBACJ,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC;gBAClC,MAAM;YACV,KAAK,GAAG;gBACJ,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC;gBAClC,MAAM;YACV;gBACI,MAAM;SACb;IACL,CAAC;IAqCO,0CAAa,GAArB;QACI,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,eAAe,EAAE,EAAE;YAC5C,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACnG,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC;YACnC,OAAO,KAAK,CAAC;SAChB;aAAM;YACH,OAAO,IAAI,CAAC;SACf;IACL,CAAC;IA/GQ,kBAAkB;QAF9B,UAAU,EAAE;yCAM+B,kBAAkB;OAJjD,kBAAkB,CAgH9B;IAAD,yBAAC;CAAA,AAhHD,IAgHC;SAhHY,kBAAkB","sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n    HttpInterceptor,\n    HttpEvent,\n    HttpHandler,\n    HttpRequest,\n    HttpResponse,\n    HttpErrorResponse,\n    HttpHeaders,\n} from '@angular/common/http';\nimport { Observable, observable } from 'rxjs';\nimport 'rxjs/add/operator/do';\nimport { AuthDetailsService } from './auth-details.service';\n\n\n@Injectable()\n\nexport class DlvHttpInterceptor implements HttpInterceptor {\n\n\n\n    constructor(private authDetailsService: AuthDetailsService) { }\n\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        if (this.beforeRequest() || (req && typeof req.withCredentials === 'boolean' && !req.withCredentials)) {\n            let request = req;\n            if (this.authDetailsService.getAuthConstants()['interceptRequests']) {\n                request = req.clone({\n                    setHeaders: this.setReqHeader(req)\n                });\n\n            }\n\n            this.updateBody(request);\n\n            return next.handle(request)\n                .do((event: HttpEvent<any>) => {\n                    if (event instanceof HttpResponse) {\n                        return event;\n                    }\n                }, (error: any) => {\n                    this.catchErrors(error);\n                    return error;\n                });\n        } else {\n            return Observable.throw('You are not authorized');\n        }\n    }\n\n    /**\n     * To update body\n     * @param request : HttpRequest\n     */\n    private updateBody(request) {\n        const bodyParams = this.authDetailsService.getAuthConstants()['bodyParams'];\n\n        if (\n            ['GET', 'DELETE'].indexOf(request['method']) <= -1 &&\n            bodyParams &&\n            Object.keys(bodyParams).length\n        ) {\n            request['body'] = request['body'] ? request['body'] : {};\n            Object.assign(request['body'], bodyParams);\n        }\n\n    }\n\n    /**\n     * To andle request error\n     * @param error\n     */\n    private catchErrors(error) {\n\n        switch (error['status']) {\n            case 403:\n                this.authDetailsService.call403();\n                break;\n            case 401:\n                this.authDetailsService.call401();\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * To set request header\n     * @param req : HttpRequest\n     */\n    private setReqHeader = (req?) => {\n        /**\n         * For default UMS token set\n         */\n\n        const setHeaders = {};\n\n        if (req.headers['headers'] && req.headers['headers'].size < 1 && !req['notHeader']) {\n            setHeaders['Content-Type'] = 'application/json';\n        }\n\n        if (req.withCredentials || typeof req.withCredentials !== 'boolean') {\n            let tokenPrefix;\n            const tokenPrefixName = this.authDetailsService.getAuthConstants()['tokenPrefixName'];\n            const isBoolean = typeof tokenPrefixName === 'boolean';\n\n            if (isBoolean) {\n                tokenPrefix = tokenPrefixName === false\n                    ? '' : tokenPrefixName === true\n                    ? 'Bearer ' : '';\n            } else {\n                tokenPrefix = tokenPrefixName ? `${tokenPrefixName} ` : 'Bearer ';\n            }\n\n            setHeaders['Authorization'] = `${tokenPrefix}${this.authDetailsService.getJWT()}`;\n            req.withCredentials = false;\n        }\n        return setHeaders;\n\n    }\n\n    private beforeRequest() {\n        if (!this.authDetailsService.isAuthenticated()) {\n            this.authDetailsService.setCallBackUrl(window.location.href && window.location.href.split('#')[0]);\n            this.authDetailsService.setOn401();\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n"]}