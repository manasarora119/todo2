var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable, EventEmitter } from '@angular/core';
import { JwtHelperService } from '@auth0/angular-jwt';
import { catchError, map } from 'rxjs/operators';
import { CookiesService } from './cookies.service';
import { AuthDetailsService } from './auth-details.service';
import { DlvHttpService } from './http.service';
var UserService = /** @class */ (function () {
    function UserService(cookies, authDetailService, httpService) {
        this.cookies = cookies;
        this.authDetailService = authDetailService;
        this.httpService = httpService;
        this.apiUrl = '';
        this.jwtHelper = new JwtHelperService();
        this.userData = new EventEmitter();
        /**
        * @name getUserInfo
        * @scope private
        *
        * @description
        * Decodes the returned JWT from a success API call and gets userdata to be stored in cookies
        * and local scope for use.
        */
        this.getUserInfo = function (jwt, options) {
            this.apiUrl = this.authDetailService.getApiURL();
            var option = {
                method: 'GET',
                url: this.apiUrl + "/users/self/",
                skipAuthorization: false
            };
            return this.httpService.httpRequest(option)
                .pipe(catchError(this.httpService.handleError), map(this.httpService.responseData));
        };
        /**
         * @name getUserRoles
         * @scope private
         *
         * @description get user permission and roles for a particular app
         * @param @appid
         */
        this.getUserRoles = function (appid) {
            this.apiUrl = this.authDetailService.getApiURL();
            var option = {
                method: 'GET',
                url: this.apiUrl + "/v2/applications/" + appid + "/" + this.getUserFromJwt().sub + "/permissions/",
                skipAuthorization: false,
                Authorization: "Bearer " + this.authDetailService.getJWT()
            };
            return this.httpService.httpRequest(option)
                .pipe(catchError(this.httpService.handleError), map(this.httpService.responseData));
        };
    }
    UserService.prototype.getUserFromJwt = function () {
        if (this.authDetailService.getJWT()) {
            return this.jwtHelper.decodeToken(this.authDetailService.getJWT());
        }
        else {
            return {};
        }
    };
    UserService.prototype.getUserFromServer = function () {
        return this.getUserInfo(this.authDetailService.getJWT(), { emitData: true });
    };
    UserService.prototype.hasAllCenterAccess = function () {
        var _this = this;
        var center = {
            read_all_facility: false,
            write_all_facility: false
        };
        this.getUserInfo(this.authDetailService.getJWT(), { emitData: true })
            .subscribe(function (res) {
            if (res) {
                if (res['user_data']['all_center_access']) {
                    center['read_all_facility'] = true;
                    center['write_all_facility'] = true;
                }
                else {
                    center['read_all_facility'] = res['read_all_facility'] || false;
                    center['write_all_facility'] = res['write_all_facility'] || false;
                }
                _this.userData.emit(center);
            }
            else {
                _this.userData.emit({});
            }
        }, function (error) {
            console.error(error);
        });
        return this.userData;
    };
    /**
     * @description change password api call
     * @param newPassword
     */
    UserService.prototype.changePassword = function (newPassword) {
        this.apiUrl = this.authDetailService.getApiURL();
        var option = {
            url: this.apiUrl + "/change_password/",
            method: 'PUT',
            body: newPassword,
            skipAuthorization: false
        };
        return this.httpService.httpRequest(option)
            .pipe(catchError(this.httpService.handleError), map(this.httpService.responseData));
    };
    UserService.prototype.setUserProfile = function (userDetails) {
        this.userDetails = userDetails;
    };
    ;
    /**
     * @name getBackgroundColor
     * @description change password api call
     * @param name: string
     */
    UserService.prototype.getBackgroundColor = function (name) {
        var hash = 0;
        for (var i = 0; i < name.length; i++) {
            hash = name.charCodeAt(i) + ((hash << 5) - hash);
        }
        var h = hash % 360;
        return 'hsl(' + h + ', 60%, 40%)';
    };
    UserService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [CookiesService,
            AuthDetailsService,
            DlvHttpService])
    ], UserService);
    return UserService;
}());
export { UserService };
//# sourceMappingURL=user.service.js.map