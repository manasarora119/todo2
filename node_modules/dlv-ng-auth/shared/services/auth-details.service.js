var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable, EventEmitter } from '@angular/core';
import { JwtHelperService } from '@auth0/angular-jwt';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import { CookiesService } from '../services/cookies.service';
var AuthDetailsService = /** @class */ (function () {
    function AuthDetailsService(cookies) {
        this.cookies = cookies;
        this.jwtHelper = new JwtHelperService();
        this.loginEmitter = new EventEmitter();
        this.jwt = '';
        this.callBackUrl = '';
        this.isLoggedEmitter = new EventEmitter();
        // default values for this options;
        this.options = {
            loginMessage: 'Redirecting to the login page, Please wait...',
            needGoogleLogin: true,
            needPasswordLogin: true,
            interceptRequests: true,
            needOtpLogin: true,
            needForgotPasswordLogin: true,
            environment: '',
            onUnAuthorized: null,
            bodyParams: null
        };
        this.baseTokenName = 'ums_token';
        // defaults for env constants, that can be overridden by passing env object with same
        //keynames to options.
        this.apiConstant = {
            'dev': 'https://api-stage-ums.delhivery.com',
            'prod': 'https://api-ums.delhivery.com',
            'staging': 'https://api-stage-ums.delhivery.com',
            'qa': 'https://api-stage-ums.delhivery.com',
        };
        this.redirectLoginURLs = {
            'dev': 'https://dev-signin.delhivery.com',
            'prod': 'https://signin.delhivery.com',
            'staging': 'https://dev-signin.delhivery.com',
            'qa': 'https://dev-signin.delhivery.com',
        };
        this.userProfileSetEmitter = new EventEmitter();
        this.changePasswordEmit = new EventEmitter();
        this.checkforErrors = function () {
            if (!this.options.environment) {
                setTimeout(function () {
                    throw new Error('Please set the current environment in the LoginService init function in root component options in "environment" key, Refer to demo for details');
                });
            }
        };
    }
    AuthDetailsService.prototype.setAuthConstants = function (customOptions) {
        Object.assign(this.options, customOptions);
        Object.assign(this.apiConstant, customOptions.env);
        Object.assign(this.redirectLoginURLs, customOptions.redirectLoginURLs);
        this.setCookieName();
    };
    AuthDetailsService.prototype.getAuthConstants = function () {
        return this.options;
    };
    ;
    AuthDetailsService.prototype.setCookieName = function () {
        if (this.options['environment'] !== 'prod') {
            this.options['tokenCookieName'] = this.options['environment'] + "_" + this.baseTokenName;
        }
        else {
            this.options['tokenCookieName'] = "" + this.baseTokenName;
        }
    };
    ;
    AuthDetailsService.prototype.getApiURL = function () {
        return this.apiConstant[this.options['environment']];
    };
    ;
    AuthDetailsService.prototype.getRedirectURL = function () {
        return this.redirectLoginURLs[this.options['environment']];
    };
    ;
    AuthDetailsService.prototype.getSubDomainName = function () {
        var parts = location.hostname.split('.');
        var subdomain = parts.shift();
        if (!parts.length) {
            return 'localhost';
        }
        else if (subdomain === '127') {
            return '127.0.0.1';
        }
        else {
            return parts.join('.');
        }
    };
    ;
    AuthDetailsService.prototype.isAuthenticated = function () {
        this.checkforErrors();
        var token = this.getJWT();
        if (!token || (token && this.jwtHelper.isTokenExpired(token))) {
            this.deleteJWT();
            return false;
        }
        else {
            return true;
        }
    };
    ;
    AuthDetailsService.prototype.afterUserValidate = function (jwtToken, config) {
        // local variable accessible across the $get method.
        var token;
        if (!this.jwt) {
            this.jwt = jwtToken;
        }
        token = this.jwt;
        if (config && config.store) {
            this.cookies.store(this.options['tokenCookieName'], token, this.jwtHelper.getTokenExpirationDate(token), this.getSubDomainName());
        }
    };
    ;
    //  GetJwt from cookies
    AuthDetailsService.prototype.getJWT = function () {
        if (this.jwt) {
            return this.jwt;
        }
        else if (this.cookies.get(this.options['tokenCookieName'])) {
            return this.cookies.get(this.options['tokenCookieName']);
        }
        else {
            return false;
        }
    };
    ;
    AuthDetailsService.prototype.login = function (config) {
        if (config.type === 'local-social') {
            // save JWT
            this.setCookieName();
            this.afterUserValidate(config.jwt, { store: true });
            this.loginEmitter.emit(true);
        }
    };
    ;
    AuthDetailsService.prototype.loginStatus = function () {
        return this.loginEmitter;
    };
    //  Delete Jwt from cookies
    AuthDetailsService.prototype.deleteJWT = function () {
        this.cookies.del(this.options['tokenCookieName'], this.getSubDomainName());
    };
    ;
    AuthDetailsService.prototype.setOn401 = function () {
        this.isLoggedEmitter.emit('true');
    };
    AuthDetailsService.prototype.getOn401 = function () {
        return this.isLoggedEmitter;
    };
    AuthDetailsService.prototype.setCallBackUrl = function (url) {
        this.callBackUrl = url;
    };
    ;
    AuthDetailsService.prototype.getCallBackUrl = function () {
        return this.callBackUrl;
    };
    ;
    AuthDetailsService.prototype.call403 = function () {
        if (typeof this.options['onUnAuthorized'] === 'function') {
            this.options['onUnAuthorized']();
        }
        else {
            alert('Unauthorized Action');
        }
    };
    AuthDetailsService.prototype.call401 = function () {
        this.deleteJWT();
        if (typeof this.options['on401Action'] === 'function') {
            this.options['on401Action']();
        }
        else {
            alert('Unauthorized access!!! Application logging out.');
            location.reload();
        }
    };
    AuthDetailsService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [CookiesService])
    ], AuthDetailsService);
    return AuthDetailsService;
}());
export { AuthDetailsService };
;
//# sourceMappingURL=auth-details.service.js.map