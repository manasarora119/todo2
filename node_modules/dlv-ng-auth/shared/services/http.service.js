var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams, HttpErrorResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
var DlvHttpService = /** @class */ (function () {
    function DlvHttpService(http) {
        this.http = http;
    }
    DlvHttpService.prototype.httpRequest = function (config) {
        var httpOptions = {};
        if (!config['skipAuthorization']) {
            httpOptions['withCredentials'] = true;
        }
        if (config['query']) {
            httpOptions['params'] = this.queryParams(config['query']);
        }
        if (config['body']) {
            httpOptions['body'] = config['body'];
        }
        return this.http.request(config.method, config.url, httpOptions);
    };
    DlvHttpService.prototype.queryParams = function (obj) {
        var params = Object.keys(obj).reduce(function (val, key) {
            val.push(key + "=" + encodeURIComponent(obj[key]));
            return val;
        }, []).join('&');
        return new HttpParams({ fromString: params });
    };
    DlvHttpService.prototype.handleError = function (error) {
        var errMsg;
        if (error instanceof HttpErrorResponse) {
            var body = error || '';
            var err = body['error'] || JSON.stringify(body);
            errMsg = error.message;
        }
        else {
            errMsg = error['message'] ? error['message'] : error;
        }
        return Observable.throw(errMsg);
    };
    /**
     * @name response
     * @scope private
     *
     * @description
     * Read response and convert it to JSON.
     *
     **/
    DlvHttpService.prototype.responseData = function (res) {
        var body = res;
        return body || {};
    };
    DlvHttpService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [HttpClient])
    ], DlvHttpService);
    return DlvHttpService;
}());
export { DlvHttpService };
//# sourceMappingURL=http.service.js.map