var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
// Custom
import { InitLoginComponent } from './init-login/init-login.component';
import { DelhiveryUserDetailsComponent } from './user-details/user-details.component';
import { ChangePasswordComponent } from './change-password/change-password.component';
import { ForbiddenComponent } from './forbidden/forbidden.component';
import { DLVMaterialModule } from 'dlv-material';
import { CookiesService, EncryptService, DlvHttpInterceptor, AuthService, AuthDetailsService, UserService, DlvHttpService } from './shared/services';
export function httpFactory(authDetailsService) {
    return new DlvHttpInterceptor(authDetailsService);
}
export { AuthService, UserService, DlvHttpInterceptor, DlvHttpService } from './shared/services';
var DlvNgAuthModule = /** @class */ (function () {
    function DlvNgAuthModule() {
    }
    DlvNgAuthModule = __decorate([
        NgModule({
            declarations: [
                InitLoginComponent,
                DelhiveryUserDetailsComponent,
                ChangePasswordComponent,
                ForbiddenComponent
            ],
            imports: [
                CommonModule,
                FormsModule,
                HttpClientModule,
                ReactiveFormsModule,
                DLVMaterialModule
            ],
            providers: [
                EncryptService,
                CookiesService,
                UserService,
                AuthDetailsService,
                AuthService,
                DlvHttpService,
                {
                    provide: HTTP_INTERCEPTORS,
                    useFactory: httpFactory,
                    deps: [AuthDetailsService],
                    multi: true
                }
            ],
            exports: [
                InitLoginComponent,
                DelhiveryUserDetailsComponent,
                ChangePasswordComponent,
                ForbiddenComponent
            ]
        })
    ], DlvNgAuthModule);
    return DlvNgAuthModule;
}());
export { DlvNgAuthModule };
//# sourceMappingURL=dlv-ng-auth.module.js.map