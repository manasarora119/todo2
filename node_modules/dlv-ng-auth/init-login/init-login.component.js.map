{"version":3,"file":"init-login.component.js","sourceRoot":"","sources":["../../tmp/src-inlined/init-login/init-login.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, EventEmitter, Output } from '@angular/core';\nimport { EncryptService, AuthService, AuthDetailsService } from '../shared/services';\n\n\n@Component({\n    selector: 'delhivery-login',\n    template: `\n      <div class=\"init-login text-center\">\n          <div class=\"status\">\n              <div class=\"spinner\"></div>\n              <p *ngIf=\"!showError\">{{loginMessage}}</p>\n              <p *ngIf=\"showError\">User is already logged in!</p>\n          </div>\n      </div>\n    `,\n    styles: [`\n      .init-login{background:#363a40;position:absolute;width:100%;height:100%}.status{top:40%;text-align:center;position:relative}p{margin-top:5px;position:relative;font-family:OpenSans-Regular;font-size:16px;color:rgba(255,255,255,0.87)}section{margin-bottom:0}.spinner{box-sizing:border-box;height:60px;width:60px;margin:80px;border:0px solid #fff;border-radius:50%;box-shadow:0 -20px 0 24px #fff inset;opacity:0.87;animation:rotate 1s infinite linear;margin:0 auto;background:#f44336}.otp-spinner{box-shadow:0 -20px 0 24px #f44336 inset;border:0px solid #f44336;background:#fff}@keyframes rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}\n    `]\n})\nexport class InitLoginComponent implements OnInit {\n    private optionConstant = {\n        needGoogleLogin: true,\n        needPasswordLogin: true,\n        interceptRequests: true,\n        needOtpLogin: true,\n        needForgotPasswordLogin: true,\n        environment: ''\n    };\n    private loginButtonDetails;\n    private appHeading;\n    private loginMessage;\n    public showError = false;\n    private redirectUrl;\n    private configOptions;\n    private config: object = {\n        google: true,\n        otp: true,\n        password: true,\n        forgotPassword: true\n    };\n    private callbackUrl: string;\n\n    @Output() callAfterLogin: EventEmitter<any> = new EventEmitter<any>();\n    @Output() callOnUnauthorized: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(\n        private authDetailsService: AuthDetailsService,\n        private encrypt: EncryptService,\n        private authService: AuthService\n    ) {\n    }\n\n\n    ngOnInit() {\n        this.configOptions = this.authDetailsService.getAuthConstants();\n        this.redirectUrl = this.authDetailsService.getRedirectURL();\n        this.callbackUrl = this.authDetailsService.getCallBackUrl();\n        this.loginButtonDetails = this.configOptions['loginButtonText'];\n        this.appHeading = this.configOptions['appHeading'];\n        this.loginMessage = this.configOptions['loginMessage'];\n\n        if (!this.configOptions.needGoogleLogin) {\n            this.config['google'] = false;\n        };\n\n        if (!this.configOptions.needPasswordLogin) {\n            this.config['password'] = false;\n        };\n\n        if (!this.configOptions.needOtpLogin) {\n            this.config['otp'] = false;\n        };\n\n        if (!this.configOptions.needForgotPasswordLogin) {\n            this.config['forgotPassword'] = false;\n        };\n\n        if (!this.authService.isAuthenticated()) {\n            this.showError = false;\n            this.openLogin();\n\n        } else {\n            this.showError = true;\n        };\n    }\n\n    private openLogin() {\n\n        setTimeout(() => {\n            let hostname = window.location.hostname;\n\n            if (hostname === 'localhost' ||\n                hostname === '127.0.0.1' ||\n                hostname === '0.0.0.0') {\n\n                let newWindow = window.open(\n                    `${this.redirectUrl}/#/${this.encrypt.encode({\n                        'url': this.callbackUrl || window.location.href.split('#')[0],\n                        'env': this.configOptions.environment,\n                        'config': this.config,\n                        'type': 'l'\n                    })}`, '');\n\n\n                var eventMethod = window.addEventListener ? 'addEventListener' : 'attachEvent';\n                var eventer = window[eventMethod];\n                var messageEvent = eventMethod == 'attachEvent' ? 'onmessage' : 'message';\n\n                // Listen to message from child window\n                eventer(messageEvent, (e) => {\n                    if (typeof e.data === 'string' || typeof e.message === 'string') {\n                        var key = e.message ? 'message' : 'data';\n                        var data = e[key];\n\n                        this.authDetailsService.loginStatus()\n                            .subscribe(res => {\n                                this.callAfterLogin.emit();\n                                newWindow.close();\n                                if (this.callbackUrl) {\n                                    window.location.href = this.callbackUrl;\n                                } else {\n                                    window.location.reload();\n                                }\n                            });\n\n                        this.authDetailsService.login({ type: 'local-social', jwt: data });\n                    }\n\n\n                }, false);\n\n            } else {\n                let newWindow = window.open(\n                    `${this.redirectUrl}/#/${this.encrypt.encode({\n                        'url': this.callbackUrl || window.location.href.split('#')[0],\n                        'env': this.configOptions.environment,\n                        'config': this.config,\n                        'type': 'nl'\n                    })}`, '_parent');\n\n            }\n\n        }, 2000);\n    }\n}\n"]}