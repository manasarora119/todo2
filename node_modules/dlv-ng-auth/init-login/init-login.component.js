var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, EventEmitter, Output } from '@angular/core';
import { EncryptService, AuthService, AuthDetailsService } from '../shared/services';
var InitLoginComponent = /** @class */ (function () {
    function InitLoginComponent(authDetailsService, encrypt, authService) {
        this.authDetailsService = authDetailsService;
        this.encrypt = encrypt;
        this.authService = authService;
        this.optionConstant = {
            needGoogleLogin: true,
            needPasswordLogin: true,
            interceptRequests: true,
            needOtpLogin: true,
            needForgotPasswordLogin: true,
            environment: ''
        };
        this.showError = false;
        this.config = {
            google: true,
            otp: true,
            password: true,
            forgotPassword: true
        };
        this.callAfterLogin = new EventEmitter();
        this.callOnUnauthorized = new EventEmitter();
    }
    InitLoginComponent.prototype.ngOnInit = function () {
        this.configOptions = this.authDetailsService.getAuthConstants();
        this.redirectUrl = this.authDetailsService.getRedirectURL();
        this.callbackUrl = this.authDetailsService.getCallBackUrl();
        this.loginButtonDetails = this.configOptions['loginButtonText'];
        this.appHeading = this.configOptions['appHeading'];
        this.loginMessage = this.configOptions['loginMessage'];
        if (!this.configOptions.needGoogleLogin) {
            this.config['google'] = false;
        }
        ;
        if (!this.configOptions.needPasswordLogin) {
            this.config['password'] = false;
        }
        ;
        if (!this.configOptions.needOtpLogin) {
            this.config['otp'] = false;
        }
        ;
        if (!this.configOptions.needForgotPasswordLogin) {
            this.config['forgotPassword'] = false;
        }
        ;
        if (!this.authService.isAuthenticated()) {
            this.showError = false;
            this.openLogin();
        }
        else {
            this.showError = true;
        }
        ;
    };
    InitLoginComponent.prototype.openLogin = function () {
        var _this = this;
        setTimeout(function () {
            var hostname = window.location.hostname;
            if (hostname === 'localhost' ||
                hostname === '127.0.0.1' ||
                hostname === '0.0.0.0') {
                var newWindow_1 = window.open(_this.redirectUrl + "/#/" + _this.encrypt.encode({
                    'url': _this.callbackUrl || window.location.href.split('#')[0],
                    'env': _this.configOptions.environment,
                    'config': _this.config,
                    'type': 'l'
                }), '');
                var eventMethod = window.addEventListener ? 'addEventListener' : 'attachEvent';
                var eventer = window[eventMethod];
                var messageEvent = eventMethod == 'attachEvent' ? 'onmessage' : 'message';
                // Listen to message from child window
                eventer(messageEvent, function (e) {
                    if (typeof e.data === 'string' || typeof e.message === 'string') {
                        var key = e.message ? 'message' : 'data';
                        var data = e[key];
                        _this.authDetailsService.loginStatus()
                            .subscribe(function (res) {
                            _this.callAfterLogin.emit();
                            newWindow_1.close();
                            if (_this.callbackUrl) {
                                window.location.href = _this.callbackUrl;
                            }
                            else {
                                window.location.reload();
                            }
                        });
                        _this.authDetailsService.login({ type: 'local-social', jwt: data });
                    }
                }, false);
            }
            else {
                var newWindow = window.open(_this.redirectUrl + "/#/" + _this.encrypt.encode({
                    'url': _this.callbackUrl || window.location.href.split('#')[0],
                    'env': _this.configOptions.environment,
                    'config': _this.config,
                    'type': 'nl'
                }), '_parent');
            }
        }, 2000);
    };
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], InitLoginComponent.prototype, "callAfterLogin", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], InitLoginComponent.prototype, "callOnUnauthorized", void 0);
    InitLoginComponent = __decorate([
        Component({
            selector: 'delhivery-login',
            template: "\n      <div class=\"init-login text-center\">\n          <div class=\"status\">\n              <div class=\"spinner\"></div>\n              <p *ngIf=\"!showError\">{{loginMessage}}</p>\n              <p *ngIf=\"showError\">User is already logged in!</p>\n          </div>\n      </div>\n    ",
            styles: ["\n      .init-login{background:#363a40;position:absolute;width:100%;height:100%}.status{top:40%;text-align:center;position:relative}p{margin-top:5px;position:relative;font-family:OpenSans-Regular;font-size:16px;color:rgba(255,255,255,0.87)}section{margin-bottom:0}.spinner{box-sizing:border-box;height:60px;width:60px;margin:80px;border:0px solid #fff;border-radius:50%;box-shadow:0 -20px 0 24px #fff inset;opacity:0.87;animation:rotate 1s infinite linear;margin:0 auto;background:#f44336}.otp-spinner{box-shadow:0 -20px 0 24px #f44336 inset;border:0px solid #f44336;background:#fff}@keyframes rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}\n    "]
        }),
        __metadata("design:paramtypes", [AuthDetailsService,
            EncryptService,
            AuthService])
    ], InitLoginComponent);
    return InitLoginComponent;
}());
export { InitLoginComponent };
//# sourceMappingURL=init-login.component.js.map