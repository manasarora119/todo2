var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { AuthService } from 'dlv-ng-auth';
import { MenuService, CenterService, PermissionService, CookiesService } from '../shared/services';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/observable/throw';
var ServicesMenuComponent = /** @class */ (function () {
    function ServicesMenuComponent(cookies, authService, menuService, permService, centerService) {
        this.cookies = cookies;
        this.authService = authService;
        this.menuService = menuService;
        this.permService = permService;
        this.centerService = centerService;
        this.onCenterChange = new EventEmitter();
        this.showOverlay = false;
        this.isLoading = true;
        this.loadModal = false;
        this.profile = {};
        this.openCenters = false;
        this.centerLoader = false;
        this.isServiceLoader = true;
        this.errors = [];
        this.isCenterList = false;
        this.isCenterNotInList = false;
        this.isAllCenter = false;
        this.options = menuService.getOptions();
        this.env = this.menuService.getOptions()['environment'];
        this.searchPlaceholder = this.searchPlaceholder ? this.searchPlaceholder : 'Search Waybill/Order Number';
    }
    ServicesMenuComponent.prototype.ngOnInit = function () {
        this.getUserInfo();
    };
    ServicesMenuComponent.prototype.ngDoCheck = function () {
        if (this.centerService.getCenterIds()) {
            this.centerIDArray = this.centerService.getCenterIds();
        }
        else {
            this.centerIDArray = [];
        }
        if (this.centerService.getSelectedCenter() && this.isCenterList) {
            if (this.isCenterNotInList && !this.centerService.isSelectCenter()) {
                this.centerName = '';
            }
            else {
                this.centerName = this.centerService.getSelectedCenter()['center_name'] || '';
                // console.log("centerName",this.centerName);
            }
            this.centerLoader = true;
        }
        this.checkServiceMenu();
    };
    /**
     * @name checkServiceMenu
     * @description this is to load menu component as per based on permission to user
     */
    ServicesMenuComponent.prototype.checkServiceMenu = function () {
        var _this = this;
        this.permService.isServiceMenu().subscribe(function (res) {
            // if there is result then loader will not show to user
            if (res && res.length) {
                _this.isServiceLoader = false;
            }
            else { // if there is no result then loader show to user
                _this.isServiceLoader = true;
            }
        }, function (error) {
            _this.isServiceLoader = false;
        });
    };
    /**
     * @name getUserInfo
     * @scope private
     *
     * @description
     * To get logged in information
     *
     */
    ServicesMenuComponent.prototype.getUserInfo = function () {
        var _this = this;
        this.authService.getUserProfile({ server: true })
            .subscribe(function (res) {
            _this.profile = res;
            _this.fetchCenter(_this.centerList, _this.profile);
        }, function (error) {
            _this.showError('Not able to fetch User details.');
        });
    };
    /**
     * @name fetchCenter
     * @param centerList : storing the list of centers based on logged in user
     * @param userinfo : storing the profile of user
     */
    ServicesMenuComponent.prototype.fetchCenter = function (centerList, userinfo) {
        if (userinfo && userinfo.is_active && userinfo.is_staff) {
            this.menuService.setActiveStaff();
        }
        // if user already have center list then auto complete directive will not be accessable
        if (centerList && centerList.length) {
            this.isAllCenter = false;
            this.getCenters(centerList);
        }
        else if ( // checking user have all access of centers
        userinfo
            && userinfo.user_data
            && (userinfo.user_data.all_center_access || userinfo.read_all_facility || userinfo.write_all_facility)) {
            this.isAllCenter = true;
            // here user getting center code on based of stored center code
            var centerCode = this.cookies.get("center_code") || false;
            if (centerCode) {
                this.getCenters(centerCode);
            }
            else {
                this.isCenterList = true;
                this.loadModal = true;
                this.centerLoader = true;
                // this.centerName = '';
                this.checkCenter();
            }
        }
        else if ( // this is checking if user's data, user facility id and it's length then it stored center id
        userinfo
            && userinfo.user_data
            && userinfo.user_data.facility_id
            && userinfo.user_data.facility_id.length) {
            var centerIds = userinfo.user_data.facility_id;
            this.getCenters(centerIds);
        }
        else {
            this.showError('Not able to fetch Centers Tagged to the User.');
            this.centerLoader = true;
        }
    };
    /**
     * @name getCenters
     * @description this method is to get names of center based on center ID
     * @param centerIds : Containing center ids
     */
    ServicesMenuComponent.prototype.getCenters = function (centerIds) {
        var _this = this;
        if (this.options['showCenter']) {
            this.centerService.setCenterIds(centerIds);
            this.centerService.getCenter(centerIds)
                .subscribe(function (response) {
                /**
                 * this is checking if there is any center id stored then it will store in an array and its length
                 * and return center name through getCenterName()
                */
                if (response && response['result'] && response['result']['data'] && response['result']['data'].length) {
                    response = _this.centerService.modifyCenterDataFaas(centerIds, response);
                    _this.centerService.setCentersData(centerIds, response);
                    var result = response['search_results'];
                    _this.centerService.setCenterNameArray(result);
                    var name_1 = _this.centerService.getCenterName();
                    _this.centerId = _this.centerService.getCenterId();
                    var index = centerIds.indexOf(_this.centerId);
                    /**
                     * Here we checking if there is any data in array, if yes then it call setcenterCookie()
                     * and return center name and center code, then shows it's status pre because it is already stored in cookie
                    */
                    if (index >= 0) {
                        _this.centerName = result[index];
                        var center = {
                            center_code: _this.centerId,
                            center_name: _this.centerName
                        };
                        _this.centerService.setcentercookie(center);
                        _this.centerService.setSelectedCenter(_this.centerName, _this.centerId, 'pre');
                    }
                    else { // If no data in array, then it calls delete cookie and set center on basis of user search
                        _this.centerService.delCenterCookie();
                        _this.centerService.setSelectedCenter();
                    }
                    _this.isCenterList = true;
                    _this.checkCenter(centerIds);
                    // This is loading center model box
                    if (_this.centerService.getCheckModal()) {
                        _this.centerLoader = true;
                    }
                }
            }, function (error) {
                _this.showError('Not able to fetch Center name.');
                _this.centerName = _this.centerService.getCenterName();
                _this.centerId = _this.centerService.getCenterId();
                _this.isCenterList = true;
                _this.centerLoader = true;
                _this.checkCenter(centerIds);
            });
        }
    };
    /**
     * @name checkCenter
     * @description this method is using to show center search box,
     * @param centerList :centerList is storing center from cookies
     */
    ServicesMenuComponent.prototype.checkCenter = function (centerList) {
        if (!this.centerId) {
            this.loadModal = true;
            this.isCenterNotInList = true;
        }
        else {
            var centerIndex = centerList.indexOf(this.centerId);
            if (centerIndex === -1 || centerIndex === null) {
                this.isCenterNotInList = true;
                this.centerName = '';
                this.loadModal = true;
            }
            else {
                this.centerLoader = true;
                this.loadModal = false;
            }
        }
    };
    /**
     * @name openOverlay
     * @description this method is for show overlay on service menu if service menu is there
     */
    ServicesMenuComponent.prototype.openOverlay = function () {
        this.showOverlay = !this.showOverlay;
    };
    /**
     * @name checkLength
     * @description This method holds the overlay component loading till the api response complete
     * @param obj : It is holding the user profile object
     *
     */
    ServicesMenuComponent.prototype.checkLength = function (obj) {
        return Object.keys(obj).length;
    };
    /**
     * @name openSearchDropdown
     * @description this method to show center serch dropdown
     */
    ServicesMenuComponent.prototype.openSearchDropdown = function () {
        this.openCenters = !this.openCenters;
    };
    /**
     * @name openSearchDropdown
     * @description this method to close center serch dropdown
     */
    ServicesMenuComponent.prototype.closeDropdown = function () {
        this.openSearchDropdown();
    };
    /**
     * @name centerChange
     * @description this method is called when user select another center from search box
     * @param center : It is containing center code and name
     */
    ServicesMenuComponent.prototype.centerChange = function (center) {
        this.onCenterChange.emit(center);
    };
    /**
     * @name closeServiceMenu
     * @description this method works when we click outside the menu overlay through click-outside directive.
     * @param isInside : It is containing menu overlay
     */
    ServicesMenuComponent.prototype.closeServiceMenu = function (isInside) {
        if (!isInside) {
            this.showOverlay = false;
        }
    };
    /**
     * @name closeCenterDrop
     * @description this method works when we click outside the search dropdown through click-outside directive.
     * @param isInside : It is containing center search dropdown
     */
    ServicesMenuComponent.prototype.closeCenterDrop = function (isInside) {
        if (!isInside) {
            this.openCenters = false;
        }
    };
    /**
     * @name showError
     * @description this method is using to show all errors through error directive
     * @param errorMsg : it is containing error msg
     */
    ServicesMenuComponent.prototype.showError = function (errorMsg) {
        if (errorMsg) {
            this.errors.push(errorMsg);
        }
        else {
            this.errors.push('Something Error.');
        }
    };
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], ServicesMenuComponent.prototype, "centerList", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ServicesMenuComponent.prototype, "styles", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ServicesMenuComponent.prototype, "menuTitle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ServicesMenuComponent.prototype, "searchPlaceholder", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ServicesMenuComponent.prototype, "onCenterChange", void 0);
    ServicesMenuComponent = __decorate([
        Component({
            selector: 'delhivery-services-menu',
            template: "\n    <error-alert [errorMsg]=\"errors\" *ngIf=\"errors.length\"></error-alert>\n    <div class=\"row service-menu-section\" *ngIf=\"options.showServices || options.showWaybill || options.showCenter\" [ngClass]=\"styles\">\n        <div class=\"service-menu-inner\">\n            <div class=\"service-menu\" *ngIf=\"options.showServices\">\n                <div class=\"child-section\" (clickOutside)=\"closeServiceMenu($event)\">\n                    <p class=\"service-menu-overlay\" [ngClass]=\"{'open' : showOverlay}\">\n                        <span (click)=\"openOverlay()\" class=\"serviceBtn\" [attr.disabled]=\"isServiceLoader\">\n                            Menu&nbsp;\n                            <i class=\"angle-up icon-pdown\" [hidden]=\"isServiceLoader\"></i>\n                        </span>\n                        <span class=\"line-spinner\" [hidden]=\"!isServiceLoader\"></span> {{checkServiceMenu()}}\n                    </p>\n                    <delhivery-services-menu-overlay *ngIf=\"checkLength(profile)\" [open]=\"showOverlay\" [profile]=\"profile\" (onError)=\"showError($event)\"></delhivery-services-menu-overlay>\n                </div>\n            </div>\n\n            <div class=\"waybill-search\" *ngIf=\"options.showWaybill\">\n                <delhivery-waybill-search [placeHolder]=\"searchPlaceholder\"></delhivery-waybill-search>\n            </div>\n            <div class=\"selected-center\" *ngIf=\"options.showCenter\">\n                <div class=\"child-section\" (clickOutside)=\"closeCenterDrop($event)\">\n                    <p class=\"centerName\">\n                        <span class=\"label\">Selected Center :</span>\n                        <span (click)=\"openSearchDropdown()\" class=\"cursor-pointer\" *ngIf=\"centerName\">\n                            {{centerName}} &nbsp;\n                            <i class=\"angle-down icon-pdown\" *ngIf=\"!isAllCenter && centerIDArray.length > 1\"></i>\n                            <i class=\"angle-down icon-pdown\" *ngIf=\"isAllCenter\"></i>\n                        </span>\n                        <span *ngIf=\"!isAllCenter && centerLoader && !centerName\" (click)=\"openSearchDropdown()\" class=\"cursor-pointer\">\n                            No Center Mapped&nbsp;\n                            <i class=\"angle-down icon-pdown\" *ngIf=\"centerIDArray.length > 1\"></i>\n                        </span>\n                        <span *ngIf=\"isAllCenter && centerLoader && !centerName\" (click)=\"openSearchDropdown()\" class=\"cursor-pointer\">\n                            No Center Mapped&nbsp;\n                            <i class=\"angle-down icon-pdown\"></i>\n                        </span>\n                        <span class=\"line-spinner\" *ngIf=\"!centerLoader\"></span>\n                    </p>\n                    <div class=\"select-drop-down\">\n                        <delhivery-selected-center *ngIf=\"isAllCenter || centerIDArray.length > 1\" [isAllCenter]=\"isAllCenter\" [open]=\"openCenters\" (closeDropdown)=\"closeDropdown($event)\" (onCenterChange)=\"centerChange($event)\"></delhivery-selected-center>\n                    </div>\n                    <div>\n                        <center-modal *ngIf=\"loadModal\" [isAllCenter]=\"isAllCenter\" [open]=\"loadModal\" (onCenterChange)=\"centerChange($event)\"></center-modal>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n  ",
            styles: ["\n    .disabled{pointer-events:none;opacity:0.5}[disabled='true']{pointer-events:none;opacity:0.5}[hidden]{display:none !important}.service-menu-section{width:100%;height:40px}.service-menu-section .child-section{margin:0 auto;text-align:center;display:table}.service-menu-section .open{color:#F0503C}.service-menu-section.invert{color:#fff}.service-menu-section.invert .open{color:#fff}.service-menu-section.invert .line-spinner{border:2px solid #fff;border-top:2px solid rgba(255,0,0,0)}.service-menu-section .service-menu{text-align:center;width:20%}.service-menu-section .image{float:left}.service-menu-section .img-wrapper{height:30px;width:30px}.service-menu-section .waybill-search{position:relative;width:30%}.service-menu-section .selected-center{min-width:240px;width:40%;text-align:center;position:relative}.service-menu-section .selected-center .select-drop-down{position:absolute;left:0;width:100%}.service-menu-section .selected-center .icon-pdown{font-size:.8em}.service-menu-section .selected-center p{line-height:14px}.service-menu-section .service-menu-overlay{line-height:14px}.service-menu-section .service-menu-overlay span{cursor:pointer}.service-menu-section .service-menu-overlay .icon-pdown{font-size:.8em;display:inline-block;transition:all 0.3s}.service-menu-section .service-menu-overlay .serviceBtn{cursor:pointer}.service-menu-section .service-menu-overlay.open .icon-pdown{font-size:.8em;-ms-transform:rotate(-180deg);-webkit-transform:rotate(-180deg);transform:rotate(-180deg)}.service-menu-section .service-menu-overlay.open .serviceBtn{font-weight:600}.service-menu-section .service-menu-header{background:#2f3748;width:100%;height:50px;color:#fff}.service-menu-section .service-menu-inner{display:flex;justify-content:space-around;width:100%}.service-menu-header{background:#2f3748;width:100%;height:50px;color:#fff}.cursor-pointer{cursor:pointer}.line-spinner{border:2px solid #000;border-top:2px solid rgba(255,0,0,0);border-radius:50%;width:10px;height:10px;-webkit-animation:spin 2s linear infinite;animation:spin 1s linear infinite;display:inline-block;vertical-align:middle}@keyframes spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}p{margin:12px 0}@media screen and (max-width: 640px){.service-menu-section{height:auto;margin:0 !important;padding:5px 10px}.service-menu-section .service-menu-inner{display:block}.service-menu-section .service-menu-inner .service-menu{text-align:center;width:100%}.service-menu-section .service-menu-inner .waybill-search{position:relative;width:100%}.service-menu-section .service-menu-inner .selected-center{min-width:240px;width:100%;text-align:center;position:relative}.service-menu-section .service-menu-inner .child-section{display:block;text-align:left}.service-menu-section .service-menu-inner .child-section .label{padding-left:0}}\n  "]
        }),
        __metadata("design:paramtypes", [CookiesService,
            AuthService,
            MenuService,
            PermissionService,
            CenterService])
    ], ServicesMenuComponent);
    return ServicesMenuComponent;
}());
export { ServicesMenuComponent };
//# sourceMappingURL=services-menu.component.js.map