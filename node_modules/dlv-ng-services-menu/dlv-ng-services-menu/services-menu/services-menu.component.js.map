{"version":3,"file":"services-menu.component.js","sourceRoot":"","sources":["../../../tmp/src-inlined/dlv-ng-services-menu/services-menu/services-menu.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAuC,KAAK,EAAE,MAAM,EAAE,YAAY,EAA8B,MAAM,eAAe,CAAC;AACxI,OAAO,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAC1C,OAAO,EAAE,WAAW,EAAE,aAAa,EAAE,iBAAiB,EAAE,cAAc,EAAE,MAAM,oBAAoB,CAAC;AAMnG,OAAO,yBAAyB,CAAC;AACjC,OAAO,uBAAuB,CAAC;AAC/B,OAAO,6BAA6B,CAAC;AACrC,OAAO,2BAA2B,CAAC;AA0DnC;IA6BE,+BACU,OAAuB,EACvB,WAAwB,EACxB,WAAwB,EACxB,WAA8B,EAC9B,aAA4B;QAJ5B,YAAO,GAAP,OAAO,CAAgB;QACvB,gBAAW,GAAX,WAAW,CAAa;QACxB,gBAAW,GAAX,WAAW,CAAa;QACxB,gBAAW,GAAX,WAAW,CAAmB;QAC9B,kBAAa,GAAb,aAAa,CAAe;QA5B5B,mBAAc,GAAsB,IAAI,YAAY,EAAO,CAAC;QAE9D,gBAAW,GAAG,KAAK,CAAC;QACpB,cAAS,GAAG,IAAI,CAAC;QAClB,cAAS,GAAG,KAAK,CAAC;QACjB,YAAO,GAAW,EAAE,CAAC;QACrB,gBAAW,GAAG,KAAK,CAAC;QACpB,iBAAY,GAAG,KAAK,CAAC;QACrB,oBAAe,GAAG,IAAI,CAAC;QACxB,WAAM,GAAe,EAAE,CAAC;QAQvB,iBAAY,GAAG,KAAK,CAAC;QACrB,sBAAiB,GAAG,KAAK,CAAC;QAE1B,gBAAW,GAAG,KAAK,CAAC;QAU1B,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC,UAAU,EAAE,CAAC;QACxC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC,aAAa,CAAC,CAAC;QACxD,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,6BAA6B,CAAA;IAC1G,CAAC;IAED,wCAAQ,GAAR;QACE,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED,yCAAS,GAAT;QACE,IAAI,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,EAAE;YACrC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC;SACxD;aAAM;YACL,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;SACzB;QAED,IAAI,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,IAAI,IAAI,CAAC,YAAY,EAAE;YAC/D,IAAI,IAAI,CAAC,iBAAiB,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,EAAE;gBAClE,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;aACtB;iBAAM;gBAEL,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;gBAC9E,6CAA6C;aAC9C;YACD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;SAC1B;QACD,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAGD;;;OAGG;IAEK,gDAAgB,GAAxB;QAAA,iBAYC;QAXC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC,SAAS,CAAC,UAAA,GAAG;YAC5C,uDAAuD;YACvD,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,EAAE;gBACrB,KAAI,CAAC,eAAe,GAAG,KAAK,CAAC;aAC9B;iBAAM,EAAE,iDAAiD;gBACxD,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC;aAC7B;QACH,CAAC,EAAE,UAAA,KAAK;YACN,KAAI,CAAC,eAAe,GAAG,KAAK,CAAC;QAC/B,CAAC,CAAC,CAAA;IAEJ,CAAC;IAED;;;;;;;OAOG;IAEK,2CAAW,GAAnB;QAAA,iBAUC;QATC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;aAC9C,SAAS,CAAC,UAAA,GAAG;YACZ,KAAI,CAAC,OAAO,GAAG,GAAG,CAAC;YACnB,KAAI,CAAC,WAAW,CAAC,KAAI,CAAC,UAAU,EAAE,KAAI,CAAC,OAAO,CAAC,CAAC;QAElD,CAAC,EAAE,UAAA,KAAK;YACN,KAAI,CAAC,SAAS,CAAC,iCAAiC,CAAC,CAAC;QACpD,CAAC,CAAC,CAAA;IAEN,CAAC;IAED;;;;OAIG;IAEK,2CAAW,GAAnB,UAAoB,UAAU,EAAE,QAAQ;QACtC,IAAI,QAAQ,IAAI,QAAQ,CAAC,SAAS,IAAI,QAAQ,CAAC,QAAQ,EAAE;YACvD,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAA;SAClC;QAED,uFAAuF;QACvF,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,EAAE;YACnC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;SAE7B;aAAM,KAAK,2CAA2C;QACnD,QAAQ;eACL,QAAQ,CAAC,SAAS;eAClB,CAAC,QAAQ,CAAC,SAAS,CAAC,iBAAiB,IAAI,QAAQ,CAAC,iBAAiB,IAAI,QAAQ,CAAC,kBAAkB,CAAC,EACtG;YACF,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YAExB,+DAA+D;YAC/D,IAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC;YAE5D,IAAI,UAAU,EAAE;gBACd,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;aAC7B;iBAAM;gBACL,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;gBACzB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;gBACtB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;gBACzB,wBAAwB;gBACxB,IAAI,CAAC,WAAW,EAAE,CAAC;aACpB;SAEF;aAAM,KAAK,6FAA6F;QACvG,QAAQ;eACL,QAAQ,CAAC,SAAS;eAClB,QAAQ,CAAC,SAAS,CAAC,WAAW;eAC9B,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,EACxC;YACA,IAAM,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC;YACjD,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;SAC5B;aAAM;YACL,IAAI,CAAC,SAAS,CAAC,+CAA+C,CAAC,CAAC;YAChE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;SAC1B;IAEH,CAAC;IAED;;;;OAIG;IACK,0CAAU,GAAlB,UAAmB,SAAS;QAA5B,iBAqDC;QApDC,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;YAC9B,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;YAC3C,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC;iBACpC,SAAS,CAAC,UAAA,QAAQ;gBACjB;;;kBAGE;gBACF,IAAI,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE;oBACrG,QAAQ,GAAG,KAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;oBACxE,KAAI,CAAC,aAAa,CAAC,cAAc,CAAC,SAAS,EAAC,QAAQ,CAAC,CAAC;oBACtD,IAAI,MAAM,GAAG,QAAQ,CAAC,gBAAgB,CAAC,CAAC;oBACxC,KAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;oBAE9C,IAAM,MAAI,GAAG,KAAI,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC;oBAChD,KAAI,CAAC,QAAQ,GAAG,KAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;oBACjD,IAAO,KAAK,GAAG,SAAS,CAAC,OAAO,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC;oBAEhD;;;sBAGE;oBAEF,IAAI,KAAK,IAAI,CAAC,EAAE;wBACd,KAAI,CAAC,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;wBAChC,IAAM,MAAM,GAAG;4BACb,WAAW,EAAE,KAAI,CAAC,QAAQ;4BAC1B,WAAW,EAAE,KAAI,CAAC,UAAU;yBAC7B,CAAA;wBACD,KAAI,CAAC,aAAa,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;wBAC3C,KAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,KAAI,CAAC,UAAU,EAAE,KAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;qBAC7E;yBAAM,EAAE,0FAA0F;wBACjG,KAAI,CAAC,aAAa,CAAC,eAAe,EAAE,CAAC;wBACrC,KAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,CAAC;qBACxC;oBACD,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC;oBACzB,KAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;oBAE5B,mCAAmC;oBACnC,IAAI,KAAI,CAAC,aAAa,CAAC,aAAa,EAAE,EAAE;wBACtC,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC;qBAC1B;iBACF;YACH,CAAC,EAAE,UAAA,KAAK;gBACN,KAAI,CAAC,SAAS,CAAC,gCAAgC,CAAC,CAAC;gBACjD,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC;gBACrD,KAAI,CAAC,QAAQ,GAAG,KAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;gBACjD,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC;gBACzB,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC;gBACzB,KAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAA;SACL;IACH,CAAC;IAED;;;;OAIG;IAEI,2CAAW,GAAlB,UAAmB,UAAW;QAC5B,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;SAC/B;aAAM;YACL,IAAM,WAAW,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,IAAI,WAAW,KAAK,CAAC,CAAC,IAAI,WAAW,KAAK,IAAI,EAAE;gBAC9C,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;gBAC9B,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;gBACrB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;aACvB;iBAAM;gBACL,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;gBACzB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;aACxB;SACF;IACH,CAAC;IAED;;;OAGG;IACK,2CAAW,GAAnB;QACE,IAAI,CAAC,WAAW,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;IACvC,CAAC;IAED;;;;;OAKG;IACK,2CAAW,GAAnB,UAAoB,GAAG;QACrB,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;IACjC,CAAC;IAED;;;OAGG;IACK,kDAAkB,GAA1B;QACE,IAAI,CAAC,WAAW,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;IACvC,CAAC;IAED;;;OAGG;IACK,6CAAa,GAArB;QACE,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACI,4CAAY,GAAnB,UAAoB,MAAM;QACxB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC;IAED;;;;OAIG;IACI,gDAAgB,GAAvB,UAAwB,QAAQ;QAC9B,IAAI,CAAC,QAAQ,EAAE;YACb,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;SAC1B;IACH,CAAC;IAED;;;;OAIG;IACI,+CAAe,GAAtB,UAAuB,QAAQ;QAC7B,IAAI,CAAC,QAAQ,EAAE;YACb,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;SAC1B;IACH,CAAC;IACD;;;;OAIG;IACI,yCAAS,GAAhB,UAAiB,QAAQ;QACvB,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;SAC3B;aAAM;YACL,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;SACtC;IAEH,CAAC;IA1TQ;QAAR,KAAK,EAAE;kCAAa,KAAK;6DAAM;IACvB;QAAR,KAAK,EAAE;;yDAAgB;IACf;QAAR,KAAK,EAAE;;4DAAmB;IAClB;QAAR,KAAK,EAAE;;oEAA2B;IACzB;QAAT,MAAM,EAAE;kCAAiB,YAAY;iEAAgC;IAN3D,qBAAqB;QAxDjC,SAAS,CAAC;YACT,QAAQ,EAAE,yBAAyB;YACnC,QAAQ,EAAE,i5GAiDT;YACD,MAAM,EAAE,CAAC,mxFAER,CAAC;SACH,CAAC;yCA+BmB,cAAc;YACV,WAAW;YACX,WAAW;YACX,iBAAiB;YACf,aAAa;OAlC3B,qBAAqB,CA6TjC;IAAD,4BAAC;CAAA,AA7TD,IA6TC;SA7TY,qBAAqB","sourcesContent":["import { Component, OnInit, AfterViewChecked, OnChanges, Input, Output, EventEmitter, ChangeDetectorRef, DoCheck } from '@angular/core';\nimport { AuthService } from 'dlv-ng-auth';\nimport { MenuService, CenterService, PermissionService, CookiesService } from '../shared/services';\n\nimport { Observable } from 'rxjs/Observable';\n\nimport { menuConfiguration } from '../shared/interfaces';\n\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/toPromise';\nimport 'rxjs/add/observable/throw';\n\n@Component({\n  selector: 'delhivery-services-menu',\n  template: `\n    <error-alert [errorMsg]=\"errors\" *ngIf=\"errors.length\"></error-alert>\n    <div class=\"row service-menu-section\" *ngIf=\"options.showServices || options.showWaybill || options.showCenter\" [ngClass]=\"styles\">\n        <div class=\"service-menu-inner\">\n            <div class=\"service-menu\" *ngIf=\"options.showServices\">\n                <div class=\"child-section\" (clickOutside)=\"closeServiceMenu($event)\">\n                    <p class=\"service-menu-overlay\" [ngClass]=\"{'open' : showOverlay}\">\n                        <span (click)=\"openOverlay()\" class=\"serviceBtn\" [attr.disabled]=\"isServiceLoader\">\n                            Menu&nbsp;\n                            <i class=\"angle-up icon-pdown\" [hidden]=\"isServiceLoader\"></i>\n                        </span>\n                        <span class=\"line-spinner\" [hidden]=\"!isServiceLoader\"></span> {{checkServiceMenu()}}\n                    </p>\n                    <delhivery-services-menu-overlay *ngIf=\"checkLength(profile)\" [open]=\"showOverlay\" [profile]=\"profile\" (onError)=\"showError($event)\"></delhivery-services-menu-overlay>\n                </div>\n            </div>\n\n            <div class=\"waybill-search\" *ngIf=\"options.showWaybill\">\n                <delhivery-waybill-search [placeHolder]=\"searchPlaceholder\"></delhivery-waybill-search>\n            </div>\n            <div class=\"selected-center\" *ngIf=\"options.showCenter\">\n                <div class=\"child-section\" (clickOutside)=\"closeCenterDrop($event)\">\n                    <p class=\"centerName\">\n                        <span class=\"label\">Selected Center :</span>\n                        <span (click)=\"openSearchDropdown()\" class=\"cursor-pointer\" *ngIf=\"centerName\">\n                            {{centerName}} &nbsp;\n                            <i class=\"angle-down icon-pdown\" *ngIf=\"!isAllCenter && centerIDArray.length > 1\"></i>\n                            <i class=\"angle-down icon-pdown\" *ngIf=\"isAllCenter\"></i>\n                        </span>\n                        <span *ngIf=\"!isAllCenter && centerLoader && !centerName\" (click)=\"openSearchDropdown()\" class=\"cursor-pointer\">\n                            No Center Mapped&nbsp;\n                            <i class=\"angle-down icon-pdown\" *ngIf=\"centerIDArray.length > 1\"></i>\n                        </span>\n                        <span *ngIf=\"isAllCenter && centerLoader && !centerName\" (click)=\"openSearchDropdown()\" class=\"cursor-pointer\">\n                            No Center Mapped&nbsp;\n                            <i class=\"angle-down icon-pdown\"></i>\n                        </span>\n                        <span class=\"line-spinner\" *ngIf=\"!centerLoader\"></span>\n                    </p>\n                    <div class=\"select-drop-down\">\n                        <delhivery-selected-center *ngIf=\"isAllCenter || centerIDArray.length > 1\" [isAllCenter]=\"isAllCenter\" [open]=\"openCenters\" (closeDropdown)=\"closeDropdown($event)\" (onCenterChange)=\"centerChange($event)\"></delhivery-selected-center>\n                    </div>\n                    <div>\n                        <center-modal *ngIf=\"loadModal\" [isAllCenter]=\"isAllCenter\" [open]=\"loadModal\" (onCenterChange)=\"centerChange($event)\"></center-modal>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n  `,\n  styles: [`\n    .disabled{pointer-events:none;opacity:0.5}[disabled='true']{pointer-events:none;opacity:0.5}[hidden]{display:none !important}.service-menu-section{width:100%;height:40px}.service-menu-section .child-section{margin:0 auto;text-align:center;display:table}.service-menu-section .open{color:#F0503C}.service-menu-section.invert{color:#fff}.service-menu-section.invert .open{color:#fff}.service-menu-section.invert .line-spinner{border:2px solid #fff;border-top:2px solid rgba(255,0,0,0)}.service-menu-section .service-menu{text-align:center;width:20%}.service-menu-section .image{float:left}.service-menu-section .img-wrapper{height:30px;width:30px}.service-menu-section .waybill-search{position:relative;width:30%}.service-menu-section .selected-center{min-width:240px;width:40%;text-align:center;position:relative}.service-menu-section .selected-center .select-drop-down{position:absolute;left:0;width:100%}.service-menu-section .selected-center .icon-pdown{font-size:.8em}.service-menu-section .selected-center p{line-height:14px}.service-menu-section .service-menu-overlay{line-height:14px}.service-menu-section .service-menu-overlay span{cursor:pointer}.service-menu-section .service-menu-overlay .icon-pdown{font-size:.8em;display:inline-block;transition:all 0.3s}.service-menu-section .service-menu-overlay .serviceBtn{cursor:pointer}.service-menu-section .service-menu-overlay.open .icon-pdown{font-size:.8em;-ms-transform:rotate(-180deg);-webkit-transform:rotate(-180deg);transform:rotate(-180deg)}.service-menu-section .service-menu-overlay.open .serviceBtn{font-weight:600}.service-menu-section .service-menu-header{background:#2f3748;width:100%;height:50px;color:#fff}.service-menu-section .service-menu-inner{display:flex;justify-content:space-around;width:100%}.service-menu-header{background:#2f3748;width:100%;height:50px;color:#fff}.cursor-pointer{cursor:pointer}.line-spinner{border:2px solid #000;border-top:2px solid rgba(255,0,0,0);border-radius:50%;width:10px;height:10px;-webkit-animation:spin 2s linear infinite;animation:spin 1s linear infinite;display:inline-block;vertical-align:middle}@keyframes spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}p{margin:12px 0}@media screen and (max-width: 640px){.service-menu-section{height:auto;margin:0 !important;padding:5px 10px}.service-menu-section .service-menu-inner{display:block}.service-menu-section .service-menu-inner .service-menu{text-align:center;width:100%}.service-menu-section .service-menu-inner .waybill-search{position:relative;width:100%}.service-menu-section .service-menu-inner .selected-center{min-width:240px;width:100%;text-align:center;position:relative}.service-menu-section .service-menu-inner .child-section{display:block;text-align:left}.service-menu-section .service-menu-inner .child-section .label{padding-left:0}}\n  `]\n})\nexport class ServicesMenuComponent implements OnInit, DoCheck {\n\n  @Input() centerList: Array<any>;\n  @Input() styles: string;\n  @Input() menuTitle: string;\n  @Input() searchPlaceholder: string;\n  @Output() onCenterChange: EventEmitter<any> = new EventEmitter<any>();\n\n  private showOverlay = false;\n  private isLoading = true;\n  public loadModal = false;\n  private profile: object = {};\n  private openCenters = false;\n  private centerLoader = false;\n  private isServiceLoader = true;\n  public errors: Array<any> = [];\n  private errMsg: string;\n  public options: menuConfiguration;\n  private centerIDArray;\n  private centerNameArray;\n  private centersNameArray;\n  private centerId;\n  private centerName;\n  private isCenterList = false;\n  private isCenterNotInList = false;\n  private env;\n  private isAllCenter = false;\n\n\n  constructor(\n    private cookies: CookiesService,\n    private authService: AuthService,\n    private menuService: MenuService,\n    private permService: PermissionService,\n    private centerService: CenterService\n  ) {\n    this.options = menuService.getOptions();\n    this.env = this.menuService.getOptions()['environment'];\n    this.searchPlaceholder = this.searchPlaceholder ? this.searchPlaceholder : 'Search Waybill/Order Number'\n  }\n\n  ngOnInit() {\n    this.getUserInfo();\n  }\n\n  ngDoCheck() {\n    if (this.centerService.getCenterIds()) {\n      this.centerIDArray = this.centerService.getCenterIds();\n    } else {\n      this.centerIDArray = [];\n    }\n\n    if (this.centerService.getSelectedCenter() && this.isCenterList) {\n      if (this.isCenterNotInList && !this.centerService.isSelectCenter()) {\n        this.centerName = '';\n      } else {\n\n        this.centerName = this.centerService.getSelectedCenter()['center_name'] || '';\n        // console.log(\"centerName\",this.centerName);\n      }\n      this.centerLoader = true;\n    }\n    this.checkServiceMenu();\n  }\n\n\n  /**\n   * @name checkServiceMenu\n   * @description this is to load menu component as per based on permission to user\n   */\n\n  private checkServiceMenu() {\n    this.permService.isServiceMenu().subscribe(res => {\n      // if there is result then loader will not show to user\n      if (res && res.length) {\n        this.isServiceLoader = false;\n      } else { // if there is no result then loader show to user\n        this.isServiceLoader = true;\n      }\n    }, error => {\n      this.isServiceLoader = false;\n    })\n\n  }\n\n  /**\n   * @name getUserInfo\n   * @scope private\n   *\n   * @description\n   * To get logged in information\n   *\n   */\n\n  private getUserInfo() {\n    this.authService.getUserProfile({ server: true })\n      .subscribe(res => {\n        this.profile = res;\n        this.fetchCenter(this.centerList, this.profile);\n\n      }, error => {\n        this.showError('Not able to fetch User details.');\n      })\n\n  }\n\n  /**\n   * @name fetchCenter\n   * @param centerList : storing the list of centers based on logged in user\n   * @param userinfo : storing the profile of user\n   */\n\n  private fetchCenter(centerList, userinfo) {\n    if (userinfo && userinfo.is_active && userinfo.is_staff) {\n      this.menuService.setActiveStaff()\n    }\n\n    // if user already have center list then auto complete directive will not be accessable\n    if (centerList && centerList.length) {\n      this.isAllCenter = false;\n      this.getCenters(centerList);\n\n    } else if ( // checking user have all access of centers\n        userinfo\n        && userinfo.user_data\n        && (userinfo.user_data.all_center_access || userinfo.read_all_facility || userinfo.write_all_facility)\n      ) {\n      this.isAllCenter = true;\n\n      // here user getting center code on based of stored center code\n      const centerCode = this.cookies.get(`center_code`) || false;\n\n      if (centerCode) {\n        this.getCenters(centerCode);\n      } else {\n        this.isCenterList = true;\n        this.loadModal = true;\n        this.centerLoader = true;\n        // this.centerName = '';\n        this.checkCenter();\n      }\n\n    } else if ( // this is checking if user's data, user facility id and it's length then it stored center id\n      userinfo\n      && userinfo.user_data\n      && userinfo.user_data.facility_id\n      && userinfo.user_data.facility_id.length\n    ) {\n      const centerIds = userinfo.user_data.facility_id;\n      this.getCenters(centerIds);\n    } else {\n      this.showError('Not able to fetch Centers Tagged to the User.');\n      this.centerLoader = true;\n    }\n\n  }\n\n  /**\n   * @name getCenters\n   * @description this method is to get names of center based on center ID\n   * @param centerIds : Containing center ids\n   */\n  private getCenters(centerIds) {\n    if (this.options['showCenter']) {\n      this.centerService.setCenterIds(centerIds);\n      this.centerService.getCenter(centerIds)\n        .subscribe(response => {\n          /**\n           * this is checking if there is any center id stored then it will store in an array and its length\n           * and return center name through getCenterName()\n          */\n          if (response && response['result'] && response['result']['data'] && response['result']['data'].length) {\n            response = this.centerService.modifyCenterDataFaas(centerIds, response); \n            this.centerService.setCentersData(centerIds,response);\n            let result = response['search_results'];\n            this.centerService.setCenterNameArray(result);\n\n            const name = this.centerService.getCenterName();\n            this.centerId = this.centerService.getCenterId();\n            const  index = centerIds.indexOf(this.centerId);\n\n            /**\n             * Here we checking if there is any data in array, if yes then it call setcenterCookie()\n             * and return center name and center code, then shows it's status pre because it is already stored in cookie\n            */\n\n            if (index >= 0) {\n              this.centerName = result[index];\n              const center = {\n                center_code: this.centerId,\n                center_name: this.centerName\n              }\n              this.centerService.setcentercookie(center);\n              this.centerService.setSelectedCenter(this.centerName, this.centerId, 'pre');\n            } else { // If no data in array, then it calls delete cookie and set center on basis of user search\n              this.centerService.delCenterCookie();\n              this.centerService.setSelectedCenter();\n            }\n            this.isCenterList = true;\n            this.checkCenter(centerIds);\n\n            // This is loading center model box\n            if (this.centerService.getCheckModal()) {\n              this.centerLoader = true;\n            }\n          }\n        }, error => {\n          this.showError('Not able to fetch Center name.');\n          this.centerName = this.centerService.getCenterName();\n          this.centerId = this.centerService.getCenterId();\n          this.isCenterList = true;\n          this.centerLoader = true;\n          this.checkCenter(centerIds);\n        })\n    }\n  }\n\n  /**\n   * @name checkCenter\n   * @description this method is using to show center search box,\n   * @param centerList :centerList is storing center from cookies\n   */\n\n  public checkCenter(centerList?) {\n    if (!this.centerId) {\n      this.loadModal = true;\n      this.isCenterNotInList = true;\n    } else {\n      const centerIndex = centerList.indexOf(this.centerId);\n      if (centerIndex === -1 || centerIndex === null) {\n        this.isCenterNotInList = true;\n        this.centerName = '';\n        this.loadModal = true;\n      } else {\n        this.centerLoader = true;\n        this.loadModal = false;\n      }\n    }\n  }\n\n  /**\n   * @name openOverlay\n   * @description this method is for show overlay on service menu if service menu is there\n   */\n  private openOverlay() {\n    this.showOverlay = !this.showOverlay;\n  }\n\n  /**\n   * @name checkLength\n   * @description This method holds the overlay component loading till the api response complete\n   * @param obj : It is holding the user profile object\n   *\n   */\n  private checkLength(obj) {\n    return Object.keys(obj).length;\n  }\n\n  /**\n   * @name openSearchDropdown\n   * @description this method to show center serch dropdown\n   */\n  private openSearchDropdown() {\n    this.openCenters = !this.openCenters;\n  }\n\n  /**\n   * @name openSearchDropdown\n   * @description this method to close center serch dropdown\n   */\n  private closeDropdown() {\n    this.openSearchDropdown();\n  }\n\n  /**\n   * @name centerChange\n   * @description this method is called when user select another center from search box\n   * @param center : It is containing center code and name\n   */\n  public centerChange(center) {\n    this.onCenterChange.emit(center);\n  }\n\n  /**\n   * @name closeServiceMenu\n   * @description this method works when we click outside the menu overlay through click-outside directive.\n   * @param isInside : It is containing menu overlay\n   */\n  public closeServiceMenu(isInside) {\n    if (!isInside) {\n      this.showOverlay = false;\n    }\n  }\n\n  /**\n   * @name closeCenterDrop\n   * @description this method works when we click outside the search dropdown through click-outside directive.\n   * @param isInside : It is containing center search dropdown\n   */\n  public closeCenterDrop(isInside) {\n    if (!isInside) {\n      this.openCenters = false;\n    }\n  }\n  /**\n   * @name showError\n   * @description this method is using to show all errors through error directive\n   * @param errorMsg : it is containing error msg\n   */\n  public showError(errorMsg) {\n    if (errorMsg) {\n      this.errors.push(errorMsg)\n    } else {\n      this.errors.push('Something Error.');\n    }\n\n  }\n}\n"]}