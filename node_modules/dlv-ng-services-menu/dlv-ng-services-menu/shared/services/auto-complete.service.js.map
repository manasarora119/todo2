{"version":3,"file":"auto-complete.service.js","sourceRoot":"","sources":["../../../../tmp/src-inlined/dlv-ng-services-menu/shared/services/auto-complete.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { catchError, map } from 'rxjs/operators';\nimport { MenuService } from './menu.service';\nimport { menuConfiguration } from './../interfaces';\nimport { error } from 'util';\nimport { DlvHttpService } from 'dlv-ng-auth';\nimport { CenterService } from './center.service';\n\n@Injectable()\n\nexport class AutoCompleteService {\n    private options: menuConfiguration;\n    private allCenter = [];\n    private searchString = '';\n    private isApi = true;\n    private centerData;\n\n\n    constructor(\n        private menuService: MenuService,\n        private httpService: DlvHttpService, \n        private centerService: CenterService\n        ) {\n        this.options = this.menuService.getOptions();\n    }\n\n\n    /**\n     * @name getCenterApi\n     * @description This method is using for getting center data from server using api\n     * @param string : It is containing input value which we enter to search\n     */\n    public getCenterApi(string) {\n        const params = {\n            'active': true,\n            'business_unit': this.options['facilityFilters'],\n            'suggest': string\n        }\n\n        if (this.options['centerStatus'] === 'all') {\n            delete params.active;\n        }\n        if (this.options['centerStatus'] === 'inactive') {\n            params.active = false;\n        }\n\n        if (this.options['facilityFilters'] && this.options['facilityFilters'].length > 1) {\n            delete params.business_unit;\n        }\n\n        if (this.options['facilityFilters'] && !this.options['facilityFilters'].length) {\n            params.business_unit = ['TRA'];\n        }\n\n        const requestOption = {\n            url: `${this.menuService.getApiUrl('faas')}v2/auto-complete/facility/`,\n            method: 'GET',\n            query: params,\n            skipAuthorization: false\n        };\n\n        return this.httpService.httpRequest(requestOption)\n            .pipe(\n                catchError(this.httpService.handleError),\n                map(this.httpService.responseData)\n            );\n    }\n\n    /**\n     * @name centerApiCall\n     * @description this method is using for autocomplete search\n     * @param searchQuery : It is containing input value string\n     */\n\n    private centerApiCall(searchQuery) {\n        return new Promise<any>((resolve, reject) => {\n            this.allCenter = [];\n\n            this.getCenterApi(searchQuery)\n                .subscribe(response => {\n\n                    let result = [];\n                    const filterCenter = [];\n\n                    if (response && response.hasOwnProperty('result') && response['result'].length) {\n                        result = response['result'];\n                         let centerIds = this.centerService.getCenterIds();\n\n                        if(centerIds && typeof centerIds === \"object\") {\n                            let filteredCenter = result.filter(function(e) {\n                                    return centerIds.indexOf(e.facility_code) > -1;\n                            });\n                            result = filteredCenter;\n                        }\n                        const sortedData = this.sortData(result, this.searchString);\n                        this.allCenter = sortedData;\n                        this.isApi = false;\n                    } else {\n                        this.allCenter = []\n                        // console.error('Dont have centers starting with requested text');\n                        // return false;\n                        resolve(true);\n                    }\n                    // This condition showing center list if length of search string is only equal to 2\n\n                    if (this.searchString.length === 2) {\n                        this.centerData = this.allCenter;\n                        resolve(this.centerData)\n                    } else if (this.allCenter && this.allCenter.length) {\n                        for (let i = 0; i <= this.allCenter.length; i++) {\n                            if (this.allCenter[i] && this.allCenter[i].hasOwnProperty('name')) {\n                                const name = this.allCenter[i].name.toLowerCase();\n                                if (name.indexOf(this.searchString) >= 0) {\n                                    filterCenter.push(this.allCenter[i]);\n                                }\n                            }\n                        }\n\n                        this.centerData = filterCenter;\n                        resolve(this.centerData)\n                    }else {\n                        this.centerData = this.allCenter\n                        resolve(this.centerData)\n                    }\n                }, () => {\n                    reject(true);\n                });\n        })\n    }\n\n    /**\n     * @name getCenterList\n     * @description getting center list basis on search\n     * @param searchQuery : it is containing inputvalue\n     * @param type : paste or input type\n     */\n\n    getCenterList(searchQuery, type) {\n\n        return new Promise<any>((resolve, reject) => {\n            const data = [];\n            this.searchString = searchQuery;\n\n            // pass the string to the function\n            this.centerApiCall(searchQuery).then(res => {\n                        resolve(res);\n                    }, () => {\n                    reject(error)\n                })\n            })\n    }\n\n    /**\n     * @name sortData\n     * @description Sort by index search data\n     * @param data : data is contatining array of matching centers list on behalf of user's search\n     * @param searchString : searchQuery is that string which user enter in search box\n     */\n\n    sortData(data, searchString) {\n        data.sort(function (a, b) {\n            const na = a.name.toLowerCase();\n            const nb = b.name.toLowerCase();\n            return na.indexOf(searchString) - nb.indexOf(searchString);\n        });\n        return data;\n    }\n}\n"]}