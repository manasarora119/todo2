var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
var CookiesService = /** @class */ (function () {
    function CookiesService() {
        // default values for this options;
        this.options = {
            path: '',
            domain: '',
            secure: false,
            expires: ''
        };
    }
    ;
    /**
     * @name init
     * @requires -
     *
     * @description
     * Initial function to override the default cookie config.
     *
     * @param customOptions {object} object that overrides the default options.
     */
    CookiesService.prototype.init = function (customOptions) {
        Object.assign(this.options, customOptions);
    };
    ;
    /**
     * @name store
     * @scope public
     *
     * @description
     * stores the cookie with a provided expiry date.
     *
     * @param {string} name :  Cookie name
     * @param {string} value : Cookie Value
     * @param {DateTime} : expiry : if not passed, one day is set as default.
     */
    CookiesService.prototype.store = function (name, value, expiry, domain, path) {
        var expires = '';
        var cookieValue = '';
        if (expiry) {
            expires = "expires=" + expiry;
        }
        else {
            var d = new Date();
            d.setDate(d.getDate() + 730);
            expires = "expires=" + d.toUTCString();
        }
        if (typeof value === "object") {
            cookieValue = JSON.stringify(value);
        }
        else {
            cookieValue = value;
        }
        document.cookie = name + "=" + cookieValue + ";path=" + (path || this.options.path) + ";domain=" + domain + ";" + expires;
    };
    ;
    /**
     * @name get
     * @scope public
     *
     * @description
     * Get cookies value based on its name.if not found then returns null.
     *
     * @param {string} cookieName : Cookie name to search in cookies list.
     */
    CookiesService.prototype.get = function (cookieName) {
        var name = cookieName + "=", ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) === ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) === 0) {
                var cookieValue = c.substring(name.length, c.length);
                try {
                    if (JSON.parse(cookieValue)) {
                        return JSON.parse(cookieValue);
                    }
                }
                catch (e) {
                    return cookieValue;
                }
            }
        }
        return null;
    };
    ;
    /**
     * @name del
     * @scope public
     *
     * @description
     * Delete cookies value based on its name.
     *
     * @param {string} cookieName : Cookie name to search in cookies list
     */
    CookiesService.prototype.del = function (cookieName, domain) {
        if (this.get(cookieName)) {
            this.store(cookieName, '', new Date(-1), domain);
        }
    };
    ;
    CookiesService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [])
    ], CookiesService);
    return CookiesService;
}());
export { CookiesService };
//# sourceMappingURL=cookies.service.js.map