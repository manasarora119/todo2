var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable, EventEmitter } from '@angular/core';
import { catchError, map } from 'rxjs/operators';
import { DlvHttpService } from 'dlv-ng-auth';
import { CookiesService } from './cookies.service';
import { MenuService } from './menu.service';
import { Observable } from 'rxjs/Observable';
import { forkJoin } from 'rxjs';
// import 'rxjs/add/observable/of';
// import 'rxjs/add/operator/catch';
// import 'rxjs/add/operator/map';
// import 'rxjs/add/operator/toPromise';
// import 'rxjs/add/observable/throw';
var CHUNK_SIZE = 500; // max number of center codes to be sent in api
var CenterService = /** @class */ (function () {
    function CenterService(cookies, menuService, httpService) {
        this.cookies = cookies;
        this.menuService = menuService;
        this.httpService = httpService;
        this.model = false;
        this.selectCenterEmit = new EventEmitter();
        this.centersDataEmit = new EventEmitter();
        this.isSelectClick = false;
        this.centerObj = [];
        this.env = this.menuService.getOptions()['environment'];
        this.centerDetail = {
            center_name: this.cookies.get("center_name") ? this.cookies.get("center_name") : '',
            center_code: this.cookies.get("center_code") ? this.cookies.get("center_code") : ''
        };
        this.selectedCenterDetails = {
            center_name: this.cookies.get("center_name") ? this.cookies.get("center_name") : '',
            center_id: this.cookies.get("center_code") ? this.cookies.get("center_code") : ''
        };
    }
    /**
     * @name setCenterIds
     * @description This method is storing center ids in an array form
     * @param centerIdList
     */
    CenterService.prototype.setCenterIds = function (centerIdList) {
        this.centerIDArray = centerIdList;
    };
    /**
     * @name getCenter
     * @description This method containing center id corresponding to searched center and hit ums api
     * @param centerIdList
     * @returns It returns center codes from api url
     */
    CenterService.prototype.getCenter = function (centerIdList) {
        var centerIdsLength;
        var faasApiUrl = this.menuService.getApiUrl('faas');
        centerIdsLength = this.checkCenterIdsCount(centerIdList);
        var params = "";
        var observableArr = [];
        var iterableLength = Math.ceil(centerIdsLength / CHUNK_SIZE);
        for (var i = 0; i < iterableLength; i++) {
            var currentCenterIdsCount = this.breakCenterIds(centerIdList, i);
            params = this.generateCenterListParams(currentCenterIdsCount);
            var option = {
                url: faasApiUrl + "v2/facilities/?facility_code=" + params,
                method: 'GET',
                skipAuthorization: false
            };
            observableArr.push(this.httpService.httpRequest(option)
                .pipe(catchError(this.httpService.handleError), map(this.httpService.responseData))); //creating array of api call to call in forkjoin
        }
        var response = {};
        return new Observable(function (observer) {
            forkJoin(observableArr).subscribe(function (res) {
                if (res.length) {
                    res.forEach(function (r) {
                        //checking and concating all the forkjoin results center details in one object 
                        if (r && r['result'] && r['result']['data'] && r['result']['data'].length) {
                            if (response && response['result'] && response['result']['data'] && response['result']['data'].length) {
                                response['result']['data'] = response['result']['data'].concat(r['result']['data']);
                            }
                            else {
                                response = r;
                            }
                        }
                    });
                }
                observer.next(response);
                observer.complete();
            });
        });
    };
    /**
     * @name breakCenterIds this function will break the list of centerids in chunks of 500
     * @param centerIdList
     * @param index
     */
    CenterService.prototype.breakCenterIds = function (centerIdList, index) {
        var start = index * CHUNK_SIZE;
        var end = CHUNK_SIZE * index + CHUNK_SIZE - 1;
        var updatedCenterIds = centerIdList.slice(start, end);
        return updatedCenterIds;
    };
    /**
     * @name checkCenterIdsCount checking the count of center ids to send in api request
     * @param centerIds
     */
    CenterService.prototype.checkCenterIdsCount = function (centerIds) {
        var length = 0;
        if (typeof centerIds !== 'string') {
            length = centerIds.length;
        }
        else {
            length = centerIds.split(',').length;
        }
        return length;
    };
    /**
     * @name modifyCenterDataFaas this function will modify the response of faas api center
     * name to that of previous UMS api
     * @param centerList
     * @param response response that we got from the faas api
     */
    CenterService.prototype.modifyCenterDataFaas = function (centerIds, response) {
        var centerList = [];
        var params = {};
        if (response && response['result'] && response['result']['data'] && response['result']['data'].length) {
            //check for centerIds whether its an array or a string 
            if (typeof centerIds !== 'string') {
                centerList = centerIds;
            }
            else {
                centerList = centerIds.split(',');
            }
            params['search_results'] = [];
            centerList.forEach(function (centerId, idx) {
                response['result']['data'].forEach(function (center) {
                    if (centerId === center['facility_code']) {
                        params['search_results'][idx] = center['name'];
                    }
                });
            });
        }
        else {
            params['search_results'] = [];
        }
        if (params['search_results'] && params['search_results'].length) {
            for (var i = 0; i < params['search_results'].length; i++) {
                if (params['search_results'][i] === undefined) {
                    params['search_results'][i] = null;
                }
            }
        }
        return params;
    };
    /**
     * @name generateCenterListParams this function is arranging the center id/ids into
     * a comma seperated string to pass it to faas api to get center names
     * @param list center ids list
     */
    CenterService.prototype.generateCenterListParams = function (list) {
        var paramsList = "";
        if (typeof list === 'string') {
            paramsList = list;
        }
        else {
            paramsList = list.join(',');
        }
        return paramsList;
    };
    /**
     * @name setCenterNameArray
     * @description storing all the center name coming from center name api(Array) and it is based on user search center code
     * @param centerArray : Containing center names in an array
     */
    CenterService.prototype.setCenterNameArray = function (centerArray) {
        this.centerNameArray = centerArray || [];
    };
    //
    /**
     * @name centersArray
     * @description it returns center name or centerid, if there is no center name
     */
    CenterService.prototype.centersArray = function () {
        return this.centerNameArray && this.centerNameArray.length ? this.centerNameArray : this.centerIDArray;
    };
    /**
     * @name getCenterName
     * @description This method returns the center name
     */
    CenterService.prototype.getCenterName = function () {
        return this.centerDetail ? this.centerDetail['center_name'] : this.centerDetail;
    };
    /**
     * @name getCenterId
     * @description it returns center code
     * @returns It returns center details like center code and name
     * @memberof CenterService
     */
    //
    CenterService.prototype.getCenterId = function () {
        return this.centerDetail ? this.centerDetail['center_code'] : this.centerDetail;
    };
    /**
     * @name getCenterIds
     * @description returns center code based on search match or which is previously stored
     * @returns returns center code in an array
     */
    CenterService.prototype.getCenterIds = function () {
        return this.centerIDArray;
    };
    /**
     * @name getSubDomainName
     * @description it returns sub-domain names
     */
    CenterService.prototype.getSubDomainName = function () {
        var parts = location.hostname.split('.');
        var subdomain = parts.shift();
        if (!parts.length) {
            return 'localhost';
        }
        else if (subdomain === '127') {
            return '127.0.0.1';
        }
        else {
            return parts.join('.');
        }
    };
    /**
     * @name constructingCenterObject
     * @description save center code and name,return stored center name in array form
     */
    CenterService.prototype.constructingCenterObject = function () {
        var center_code;
        var center_name;
        var centerId = this.getCenterIds();
        var centerArray = this.centersArray();
        var centerDetails = [];
        for (var i = 0; i < centerArray.length; i++) {
            if (centerArray[i]) {
                center_code = centerId[i];
                center_name = centerArray[i];
                centerDetails.push({ center_code: center_code, center_name: center_name });
            }
            else {
                center_code = centerId[i];
                center_name = centerId[i];
                centerDetails.push({ center_code: center_code, center_name: center_name });
            }
        }
        return centerDetails;
    };
    /**
     * @name setCentersData
     * @description When a user gets a centerlist in the api and is not having all center access then
     * this function creates an object for the given list
     * @param idList : It is containing centers code
     * @param nameList : It is containing centers name
     */
    CenterService.prototype.setCentersData = function (idList, nameList) {
        if (idList.length) {
            for (var i = 0; i < idList.length; i++) {
                var code = idList[i];
                var name_1 = nameList.search_results[i];
                this.centerObj.push({ code: code, name: name_1 });
            }
            this.centersDataEmit.emit(this.centerObj);
        }
    };
    /**
     * @name getUsersFacilityDetails
     * @description This method is returning object to above function
     */
    CenterService.prototype.getUsersFacilityDetails = function () {
        return this.centersDataEmit;
    };
    /**

     * @name allCenterData
     * @description This method is used to provide all center data
     * @returns It returns details of all center
     */
    CenterService.prototype.allCenterData = function () {
        return this.centerDetail;
    };
    /**
     * @name setCenterManually
     * @description this is wrapper function to set center name manually on behalf of center id and type also save it into cookies
     * @param center : center is containing center code and center type
     * @returns it returns center name on behalf of center id
     */
    CenterService.prototype.setCenterManually = function (center) {
        var _this = this;
        this.getCenter([center.center_code])
            .subscribe(function (res) {
            center.center_name = res['search_results'][0];
            _this.setcentercookie(center);
            _this.setSelectedCenter(center.center_name, center.center_code, center.center_type || 'new');
        });
        return this;
    };
    /**
     * @name delCenterCookie
     * @description this method is using to delete center details from cookies
     */
    CenterService.prototype.delCenterCookie = function () {
        this.cookies.del("center_name", this.getSubDomainName());
        this.cookies.del("center_code", this.getSubDomainName());
    };
    /**
     * @name setcentercookie
     * @description this method is storing the center name and center code in cookies
     * @param center : center is containing center code and center name
     */
    CenterService.prototype.setcentercookie = function (center) {
        var subdomain = this.getSubDomainName();
        this.cookies.store("center_name", center.center_name, '', subdomain, '/');
        this.cookies.store("center_code", center.center_code, '', subdomain, '/');
    };
    /**
     * @name setSelectedCenter
     * @description This method storing center name, code and type of center in selectedCenterDetails object
     * @param center : it is used as center name
     * @param centerId : it is used as center id
     * @param type : it is used as type i.e. pre or new
     */
    CenterService.prototype.setSelectedCenter = function (center, centerId, type) {
        this.selectCenter = center;
        this.selectedCenterDetails = {
            center_id: centerId,
            center_name: center,
            type: type
        };
        // Emit selected center details
        this.selectCenterEmit.emit(this.selectedCenterDetails);
    };
    /**
     * @name processSelectCenter
     * @description This method works when user select center through setSelectedCenter() from center modal and
     * It is storing center code, name and it's type as well as storing in cookies through setcentercookie() ,
     * Checking selection status through setIsSelected()
     * @param center : It is containing center code and center name
     */
    CenterService.prototype.processSelectCenter = function (center) {
        this.setIsSelected(true);
        this.setcentercookie(center);
        this.setSelectedCenter(center.center_name, center.center_code, 'new');
    };
    /**
     * @name setCheckModel
     * @description used for open modal if modelOpen is true
     * @param modelOpen : search dropdown
     */
    CenterService.prototype.setCheckModel = function (modelOpen) {
        this.model = modelOpen;
    };
    /**
     * @name getCheckModal
     * @description used for check current status model ie true or false
     */
    CenterService.prototype.getCheckModal = function () {
        return this.model;
    };
    /**
     * @name getSelectedCenter
     * @description This method is used to provide all center details
     * @returns it returns center code, name and type of center
     */
    CenterService.prototype.getSelectedCenter = function () {
        return this.selectedCenterDetails;
    };
    /**
     * @name setIsSelected
     * @description This method is checking that user have made a click to select the center or not
     * @param it is containing center code and center name value
     */
    CenterService.prototype.setIsSelected = function (val) {
        this.isSelectClick = val || false;
    };
    /**
     * @name isSelectCenter
     * @description returning the click status of selected center
     * @returns It returns the select center status
     */
    CenterService.prototype.isSelectCenter = function () {
        return this.isSelectClick;
    };
    /**
     *
     * This method is listen from Other Service/Component
     * @returns Emit Center details on center change
     * @memberof CenterService
     */
    CenterService.prototype.onCenterChange = function () {
        return this.selectCenterEmit;
    };
    CenterService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [CookiesService,
            MenuService,
            DlvHttpService])
    ], CenterService);
    return CenterService;
}());
export { CenterService };
//# sourceMappingURL=center.service.js.map