import { EventEmitter } from '@angular/core';
import { Observable } from 'rxjs';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/observable/throw';
import { MenuService } from './menu.service';
import { CookiesService } from './cookies.service';
import { DlvHttpService } from 'dlv-ng-auth';
export declare class PermissionService {
    private cookies;
    private menuService;
    private httpService;
    private umsApiUrl;
    private hqApiUrl;
    private configApiUrl;
    private serviceMenuEmit;
    private hqPermission;
    private umsPermission;
    private serviceMenu;
    private navigationLink;
    private recentServices;
    private urlLink;
    private env;
    private displayService;
    umsPermArr: Array<any>;
    hqPermArr: Array<any>;
    constructor(cookies: CookiesService, menuService: MenuService, httpService: DlvHttpService);
    /**
     * @name getServicesMenu
     * @description This method is firing an api to bring the whole json of service menu
     */
    getServicesMenu(): Observable<{}>;
    /**
     * @name This method is containing array of services which are assigned to user on the hq and ums permission basis and
     * It is called in service-menu-overlay.
     * @param menu : menu is stroing array of services
     */
    setServiceName(menu: any): void;
    /**
     * @name createPermissionUms
     * @description it is storing permissions in array through ums api
     * @param res
     */
    createPermissionUms(res: any): void;
    /**
     * @name hasPerformancePerm
     * @description checking whether the user have access to My Performance Link
     * @param urlEndPoint http url for the go to home link
     * @param umsPermissions
     */
    hasPerformancePerm(urlEndPoint: any, umsPermissions: any): any;
    /**
     * @name umsPermArray
     * @description It is returning permission array through above function
     */
    getUmsPermArray(): any[];
    /**
     * @name createPermissionHq
     * @description it is storing permissions in array through HQ api
     * @param res
     */
    createPermissionHq(res: any): void;
    getHqPermArray(): any[];
    /**
     * @name getHQPermission
     * @description Get Permission from HQ
     */
    getHQPermission(): Observable<{}>;
    /**
     * @name getUMSPermissions
     * @description Get Permission from UMS
     * @param uuid : It is containing user profile ums id
     */
    getUMSPermissions(uuid: any): Observable<{}>;
    /**
         * @name mergePermission
         * @description Merging ums and hq permission
         * @param obj1 :
         * @param obj2 :
         */
    mergePermission(obj1: any, obj2: any): any;
    /**
     * @name updatedPermission
     * @description This method upated and show services in menu to user after merging service from hq and ums to user
     * @param permission It is storing array of service types of permisssions
     */
    updatedPermission(permission?: any): any;
    /**
     * @name isPermission
     * @description This method checks already present services in menu which are assigned to user on permission basis of hq and ums
     * @param permission : It is storing an array of types of permissions to user
     */
    private isPermission;
    /**
     * @name isNotPermission
     * @description This method checks if service is in service menu and user have permission in sub menu to display
     * then it will show the service in menu overlay.
     */
    private isNotPermission;
    /**
     * @name appendDisplayService
     * @description This method append display service based on user's permissions
     * @param value : Value is group of menu objects
     * @param val : val is storing multiple service of main object
     */
    appendDisplayService(value: any, val: any): void;
    /**
     * @name isServiceMenu
     * @description This method is called in service menu component to load service menu
     */
    isServiceMenu(): EventEmitter<any>;
    /**
     * @name recentServiceFilter
     * @description This method is used to show current used service from service menu
     * @param as for all Service
     * @param rs for recent Service
     */
    recentServiceFilter(asm: any, rs: any): any[];
}
