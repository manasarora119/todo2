var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { Constant } from './constant';
var MenuService = /** @class */ (function () {
    function MenuService() {
        this.options = {
            environment: '',
            facilityFilters: ['TRA'],
            showCloseCenterModalBtn: true,
            centerStatus: '',
            showServices: true,
            showWaybill: true,
            showCenter: true
        };
        this.UmsApi = Constant().UMS_API;
        this.HqApi = Constant().HQ_API;
        this.FaasApi = Constant().FAAS_API;
        this.linkAddress = Constant().LINK_ADDRESS;
        this.ConfigApi = Constant().CONFIG_API;
        this.isActiveStaff = false;
        this.performanceLink = Constant().PERFORMANCE_API;
    }
    // This is the initializing function which is mapping the environment basis on ums, hq and faas api
    MenuService.prototype.init = function (customOptions) {
        Object.assign(this.options, customOptions);
        Object.assign(this.UmsApi, customOptions.env);
        Object.assign(this.HqApi, customOptions.env);
        Object.assign(this.FaasApi, customOptions.env);
        Object.assign(this.performanceLink, customOptions.env);
    };
    ;
    /**
     * @name getOptions
     * @description This method called first when service menu loads in service menu component and it return environment as per all apis
     * @returns It returns environment type to user
     */
    MenuService.prototype.getOptions = function () {
        return this.options;
    };
    ;
    /**
     * @name getApiUrl
     * @description This method provides url based on api environment wheather it is ums ,hq or faas
     * @param type : It is containing type of api call
     */
    MenuService.prototype.getApiUrl = function (type) {
        // Here we checking if type is ums then it return ums environment
        if (type === 'ums') {
            return this.UmsApi[this.options['environment']];
        }
        // Here we checking if type is Hq then it return hq environment
        if (type === 'hq') {
            return this.HqApi[this.options['environment']];
        }
        // Here we checking if type is faas then it return faas environment
        if (type === 'faas') {
            return this.FaasApi[this.options['environment']];
        }
        // Here we checking if type is faas then it return faas environment
        if (type === 'performance') {
            return this.performanceLink[this.options['environment']];
        }
    };
    /**
     * @name getUrlLink
     * @description This method used to get particular url based on api call environment
     */
    MenuService.prototype.getUrlLink = function () {
        return this.linkAddress;
    };
    /**
     * @name setActiveStaff
     * @description This method sets the is_staff logged in user's staff status
     */
    MenuService.prototype.setActiveStaff = function () {
        this.isActiveStaff = true;
    };
    /**
     * @name getActiveStaff
     * @description This method is getting is_staff status of logged in user
     */
    MenuService.prototype.getActiveStaff = function () {
        return this.isActiveStaff;
    };
    /**
     * @name getConfigUrl
     * @description This method is used to get config url and it's environemnt when user initially log in
     * @returns It returns url with environment
     */
    MenuService.prototype.getConfigUrl = function () {
        return this.ConfigApi[this.options['environment']];
    };
    MenuService = __decorate([
        Injectable()
        // It is working as a provider in angular2
        ,
        __metadata("design:paramtypes", [])
    ], MenuService);
    return MenuService;
}());
export { MenuService };
//# sourceMappingURL=menu.service.js.map