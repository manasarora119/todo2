{"version":3,"file":"selected-center.component.js","sourceRoot":"","sources":["../../../tmp/src-inlined/dlv-ng-services-menu/selected-center/selected-center.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAU,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAC/E,OAAO,EAAE,cAAc,EAAE,aAAa,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AAkBhF;IAWI,yBAAoB,aAA6B,EAAU,WAAyB,EAAU,OAAyB;QAAnG,kBAAa,GAAb,aAAa,CAAgB;QAAU,gBAAW,GAAX,WAAW,CAAc;QAAU,YAAO,GAAP,OAAO,CAAkB;QAR7G,mBAAc,GAAuB,IAAI,YAAY,EAAO,CAAC;QAC7D,kBAAa,GAAuB,IAAI,YAAY,EAAO,CAAC;QAQlE,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC,aAAa,CAAC,CAAC;IAC5D,CAAC;IAED,kCAAQ,GAAR;IACA,CAAC;IAED,mCAAS,GAAT;QACI,IAAG,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,EAAC;YACjC,IAAI,CAAC,aAAa,GAAI,IAAI,CAAC,aAAa,CAAC,wBAAwB,EAAE,CAAC;YACpE,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;SAC1C;IACL,CAAC;IAED;;;;OAIG;IACI,sCAAY,GAAnB,UAAoB,MAAM;QACtB,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;QAC/C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACrC,CAAC;IAjCQ;QAAR,KAAK,EAAE;;iDAAgB;IACf;QAAR,KAAK,EAAE;;wDAAuB;IACrB;QAAT,MAAM,EAAE;kCAAkB,YAAY;2DAAgC;IAC7D;QAAT,MAAM,EAAE;kCAAiB,YAAY;0DAAgC;IAJ7D,eAAe;QAhB3B,SAAS,CAAC;YACT,QAAQ,EAAE,2BAA2B;YACrC,QAAQ,EAAE,gXAST;YACD,MAAM,EAAE,CAAC,yqDAER,CAAC;SACH,CAAC;yCAYsC,aAAa,EAAwB,WAAW,EAAqB,cAAc;OAX9G,eAAe,CAqC3B;IAAD,sBAAC;CAAA,AArCD,IAqCC;SArCY,eAAe","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { CookiesService, CenterService, MenuService } from '../shared/services';\n\n@Component({\n  selector: 'delhivery-selected-center',\n  template: `\n    <div class=\"dropdown\">\n        <div class=\"arrowBroder\" *ngIf=\"open\"></div>\n        <div class=\"dropdown-content\" [ngClass]=\"{'open' : open}\">\n            <div>\n                <auto-complete-center placeholder=\"Search Center\" (onCenterChange)=\"selectCenter($event)\"></auto-complete-center>\n            </div>\n        </div>\n    </div>\n  `,\n  styles: [`\n    .dropdown{position:relative;text-align:left;width:100%}.dropdown .arrowBroder{font-size:0px;line-height:0%;width:0px;border-bottom:12px solid #f9f9f9;border-left:10px solid rgba(0,0,0,0);border-right:10px solid rgba(0,0,0,0);left:0;right:0;position:absolute;margin:0 auto;top:-10px}.dropdown .dropdown-content{padding:8px;width:calc(100% - 16px);display:none;position:absolute;background-color:#f9f9f9;min-width:200px;max-width:250px;overflow:auto;left:0;right:0;margin:0 auto;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);z-index:1}.dropdown .dropdown-content p.no-result{margin:0 0 10px;color:#000}.dropdown .dropdown-content .center-form-search{position:relative}.dropdown .dropdown-content .center-form-search span{position:absolute;right:8px;top:8px;color:#808080}.dropdown .dropdown-content .search-center{width:calc(100% - 10px);padding:3px 5px;border:none;box-shadow:none !important;border-radius:0;border-bottom:1px solid #a6a6a6;font-size:12px;line-height:21px;color:#414042;margin-bottom:10px;background:transparent}.dropdown .dropdown-content .search-center:focus{border-color:red;outline:none;box-shadow:none}.dropdown .dropdown-content .center-list{margin:0 0;border-radius:1px;font-size:12px;color:#414042;background:none;padding:0;margin:0;max-height:140px;text-align:left;overflow-y:auto;width:100%}.dropdown .dropdown-content .center-list .center-name-list{list-style:none;margin-bottom:4px;width:calc(100% - 10px);cursor:pointer;font-size:14px;padding:4px 5px;display:block;border-bottom:1px dashed #cccccc;transition:all 0.3s linear}.dropdown .dropdown-content .center-list .center-name-list:hover{background:#ececec}.dropdown .dropdown-content.open{display:block !important}\n  `]\n})\nexport class CenterComponent implements OnInit {\n    @Input() open : boolean;\n    @Input() isAllCenter : boolean;\n    @Output() onCenterChange : EventEmitter<any> = new EventEmitter<any>();\n    @Output() closeDropdown : EventEmitter<any> = new EventEmitter<any>();\n\n    private centerDetails;\n    private centerArray;\n    private env : string;\n    \n\n    constructor(private centerService : CenterService, private menuService : MenuService, private cookies :  CookiesService) { \n        this.env = this.menuService.getOptions()['environment'];\n    }\n\n    ngOnInit() {\n    }\n    \n    ngDoCheck(){\n        if(this.centerService.centersArray()){\n            this.centerDetails =  this.centerService.constructingCenterObject();\n            this.centerService.setCheckModel(true);\n        }\n    }\n\n    /**\n     * @name selectCenter\n     * @description this function is used to select center from search dropdown and storing it into cookies as well as show the status 'new', close dropdown and emit the selected center\n     * @param center : this is containing select center code and center name \n     */\n    public selectCenter(center){\n        this.centerService.processSelectCenter(center);\n        this.closeDropdown.emit(false);\n        this.onCenterChange.emit(center);\n    }\n\n  \n}\n\n\n\n  \n"]}