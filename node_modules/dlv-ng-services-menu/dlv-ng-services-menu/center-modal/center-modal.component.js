var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { CookiesService, CenterService, MenuService } from '../shared/services';
var CenterModalComponent = /** @class */ (function () {
    function CenterModalComponent(centerService, cookies, menuService) {
        this.centerService = centerService;
        this.cookies = cookies;
        this.menuService = menuService;
        this.onCenterChange = new EventEmitter();
        this.center = {
            center_name: "",
            center_code: ""
        };
        this.env = this.menuService.getOptions()['environment'];
        this.showCloseBtn = this.menuService.getOptions()['showCloseCenterModalBtn'];
    }
    CenterModalComponent.prototype.ngOnInit = function () {
        if (!this.isAllCenter) {
            this.centerDetails = this.centerService.constructingCenterObject();
        }
    };
    // 
    /**
     * @name closeSearchCenter
     * @description This method is using to close center search modal after select center from modal
     */
    CenterModalComponent.prototype.closeSearchCenter = function () {
        this.open = false;
        //This condition checking if there is only 1 center mapped externally then it will not call the api and call processSelectCenter function
        if (!this.isAllCenter && this.centerDetails.length === 1) {
            this.centerService.processSelectCenter(this.centerDetails[0]);
        }
        //If data is coming through api means there is no center selected yet then it will show the search modal and call setCheckModel()
        else if (!this.isAllCenter && !this.centerDetails.length) {
            this.centerService.setCheckModel(true);
        }
    };
    /**
     * @name onCenterSelect
     * @description this function works after select center from search box in modal page, store result in cookie
     * @param center : It is storing center code and center name
     */
    CenterModalComponent.prototype.onCenterSelect = function (center) {
        this.centerService.processSelectCenter(center);
        this.closeSearchCenter();
        this.onCenterChange.emit(center); // Emit the selected center
    };
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], CenterModalComponent.prototype, "open", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], CenterModalComponent.prototype, "isAllCenter", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], CenterModalComponent.prototype, "onCenterChange", void 0);
    CenterModalComponent = __decorate([
        Component({
            selector: 'center-modal',
            template: "\n    <div class=\"searchCenterModal\" *ngIf=\"open\">\n        <div class=\"center-modal-overlay\"></div>\n        <div class=\"center-modal-body\">\n            <div class=\"center-modal-header\">\n                <h3>Select Center</h3>\n            </div>\n            <div class=\"center-modal-content\">\n                <auto-complete-center placeholder=\"Search Center\" (onCenterChange)=\"onCenterSelect($event)\"></auto-complete-center>\n            </div>\n            <div class=\"center-modal-footer\" *ngIf=\"showCloseBtn\">\n                <button class=\"center-button\" (click)=\"closeSearchCenter()\">Close</button>\n            </div>\n        </div>\n    </div>\n  ",
            styles: ["\n    .centerName{text-align:center}.centerName span{cursor:pointer}.searchCenterModal{position:fixed;top:0;left:0;width:100%;height:100%;z-index:100}.searchCenterModal .center-modal-overlay{position:absolute;top:0;left:0;background:rgba(0,0,0,0.6);width:100%;height:100%}.searchCenterModal .center-modal-body{padding:10px 20px;overflow:auto;position:relative;background:#fff;margin:12% auto;width:25vw;min-height:175px;color:#333;border:none}.searchCenterModal .center-modal-body .center-modal-header{text-align:center;padding:0px !important;color:#515356;margin-bottom:10px}.searchCenterModal .center-modal-body .center-modal-header h3{padding:0 0 5px;margin:0}.searchCenterModal .center-modal-body .center-modal-content{box-shadow:none;position:relative;box-shadow:none;overflow:visible;padding-bottom:40px}.searchCenterModal .center-modal-body .center-modal-content .center-form-search{position:relative}.searchCenterModal .center-modal-body .center-modal-content .center-form-search span{position:absolute;right:8px;top:8px;color:#808080}.searchCenterModal .center-modal-body .center-modal-content .search-center{width:calc(100% - 10px);padding:3px 5px;border:none;box-shadow:none !important;border-radius:0;border-bottom:1px solid #a6a6a6;font-size:12px;line-height:21px;color:#414042;margin-bottom:10px;background:transparent}.searchCenterModal .center-modal-body .center-modal-content .search-center:focus{border-color:red;outline:none;box-shadow:none}.searchCenterModal .center-modal-body .center-modal-content .center-list{margin:0 0;border-radius:1px;font-size:12px;color:#414042;background:#ffffff;padding:0;margin:0;max-height:140px;text-align:left;overflow-y:auto;width:100%}.searchCenterModal .center-modal-body .center-modal-content .center-list .center-name-list{list-style:none;margin-bottom:4px;width:calc(100% - 10px);cursor:pointer;font-size:14px;padding:4px 5px;display:block;border-bottom:1px dashed #cccccc;transition:all 0.3s linear}.searchCenterModal .center-modal-body .center-modal-content .center-list .center-name-list:hover{background:#ececec}.searchCenterModal .center-modal-body .center-modal-content .single-center{font-size:15px;text-align:center;margin:18% 0}.searchCenterModal .center-modal-body .center-modal-content .single-center .single-center-name{font-size:18px;margin-top:10px;display:block}.searchCenterModal .center-modal-body .center-modal-content .no-center{font-size:16px;text-align:center;margin:22% 0}.searchCenterModal .center-modal-body .center-modal-content .no-result{text-align:center}.searchCenterModal .center-modal-body .center-modal-footer{border:none;position:absolute;width:calc(100% - 40px);bottom:15px;padding:0 20px;left:0}.searchCenterModal .center-modal-body .center-modal-footer .center-button{float:right;background:#F0503C;border:1px solid #F0503C;color:#FFFFFF;font-family:OpenSans-Semibold;letter-spacing:1.2px;cursor:pointer;border-radius:3px;font-size:13px;line-height:16px;outline:none;padding:4px 20px;transition:all 0.1s ease 0.1s;word-spacing:3px;text-transform:uppercase}.loading-centers{background:#BDBDBD;position:absolute;width:100%;height:100%}.loading-centers .status{top:40%;text-align:center;position:relative}@media (max-width: 1024px){.searchCenterModal .center-modal-body{width:35%}}@media (max-width: 900px){.searchCenterModal .center-modal-body{width:45%}}@media (max-width: 640px){.searchCenterModal .center-modal-body{width:80%}}\n  "]
        }),
        __metadata("design:paramtypes", [CenterService, CookiesService, MenuService])
    ], CenterModalComponent);
    return CenterModalComponent;
}());
export { CenterModalComponent };
//# sourceMappingURL=center-modal.component.js.map