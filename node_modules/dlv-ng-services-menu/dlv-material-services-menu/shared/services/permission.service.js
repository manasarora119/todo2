var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable, EventEmitter } from '@angular/core';
import { catchError, map } from 'rxjs/operators';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/observable/throw';
import { MatMenuService } from './menu.service';
import { CookiesService } from './cookies.service';
import { DlvHttpService } from 'dlv-ng-auth';
var PermissionService = /** @class */ (function () {
    // private allServicesMenu : Array<any> = [];
    function PermissionService(cookies, menuService, httpService) {
        this.cookies = cookies;
        this.menuService = menuService;
        this.httpService = httpService;
        this.serviceMenuEmit = new EventEmitter();
        this.hqPermission = [];
        this.umsPermission = [];
        this.serviceMenu = [];
        this.umsPermArr = [];
        this.hqPermArr = [];
        this.env = menuService.getOptions()['environment'];
        this.urlLink = menuService.getUrlLink()[this.env];
    }
    /**
     * @name getServicesMenu
     * @description This method is firing an api to bring the whole json of service menu
     */
    PermissionService.prototype.getServicesMenu = function () {
        this.configApiUrl = this.menuService.getConfigUrl();
        var option = {
            url: this.configApiUrl + "/config?file=menu.json",
            method: 'GET',
            skipAuthorization: false
        };
        return this.httpService.httpRequest(option)
            .pipe(catchError(this.httpService.handleError), map(this.httpService.responseData));
    };
    /**
     * @name This method is containing array of services which are assigned to user on the hq and ums permission basis and
     * It is called in service-menu-overlay.
     * @param menu : menu is stroing array of services
     */
    PermissionService.prototype.setServiceName = function (menu) {
        this.serviceMenu = menu.slice();
        this.navigationLink = this.serviceMenu.splice(0, 1);
    };
    /**
     * @name createPermissionUms
     * @description it is storing permissions in array through ums api
     * @param res
     */
    PermissionService.prototype.createPermissionUms = function (res) {
        var perm = res['permissions'];
        for (var i = 0; i < perm.length; i++) {
            this.umsPermArr.push(perm[i].name);
        }
    };
    /**
     * @name hasPerformancePerm
     * @description checking whether the user have access to My Performance Link
     * @param urlEndPoint http url for the go to home link
     * @param umsPermissions
     */
    PermissionService.prototype.hasPerformancePerm = function (urlEndPoint, umsPermissions) {
        this.navigationLink[0].display = false;
        this.navigationLink[0]['submenu'][0].display = false;
        this.navigationLink[0]['submenu'][0].url = "" + urlEndPoint + this.navigationLink[0]['submenu'][0].url;
        if (umsPermissions.indexOf('can_view_lm_tl_rating') > -1) {
            var url = this.menuService.getApiUrl('performance');
            this.navigationLink[0]['submenu'][1].url = "" + url + this.navigationLink[0]['submenu'][1].url;
            this.navigationLink[0]['submenu'][1].tlLink = true;
            this.navigationLink[0]['submenu'][1].display = false;
            return this.navigationLink[0].submenu;
        }
        else {
            var tempArr = [];
            tempArr.push(this.navigationLink[0].submenu[0]);
            return tempArr;
        }
    };
    /**
     * @name umsPermArray
     * @description It is returning permission array through above function
     */
    PermissionService.prototype.getUmsPermArray = function () {
        return this.umsPermArr;
    };
    /**
     * @name createPermissionHq
     * @description it is storing permissions in array through HQ api
     * @param res
     */
    PermissionService.prototype.createPermissionHq = function (res) {
        var perm = res['perms'];
        for (var i = 0; i < perm.length; i++) {
            this.hqPermArr.push(perm[i]);
        }
    };
    PermissionService.prototype.getHqPermArray = function () {
        return this.hqPermArr;
    };
    /**
     * @name getHQPermission
     * @description Get Permission from HQ
     */
    PermissionService.prototype.getHQPermission = function () {
        this.hqApiUrl = this.menuService.getApiUrl('hq');
        // return Constant.HQ_PERMISSION;
        var option = {
            url: this.hqApiUrl + "/api/backend/fetch-permission",
            method: 'GET',
            skipAuthorization: false
        };
        return this.httpService.httpRequest(option)
            .pipe(catchError(this.httpService.handleError), map(this.httpService.responseData));
    };
    /**
     * @name getUMSPermissions
     * @description Get Permission from UMS
     * @param uuid : It is containing user profile ums id
     */
    PermissionService.prototype.getUMSPermissions = function (uuid) {
        this.umsApiUrl = this.menuService.getApiUrl('ums');
        var option = {
            url: this.umsApiUrl + "/user_roles/" + uuid + "/",
            method: 'GET',
            skipAuthorization: false
        };
        return this.httpService.httpRequest(option)
            .pipe(catchError(this.httpService.handleError), map(this.httpService.responseData));
    };
    // Merging ums and hq permission
    /**
         * @name mergePermission
         * @description Merging ums and hq permission
         * @param obj1 :
         * @param obj2 :
         */
    PermissionService.prototype.mergePermission = function (obj1, obj2) {
        var isActiveStaff = this.menuService.getActiveStaff();
        var obj = obj2.concat(obj1);
        if (isActiveStaff) {
            obj = obj.concat('show_frontend_menu');
        }
        return obj;
    };
    /**
     * @name updatedPermission
     * @description This method upated and show services in menu to user after merging service from hq and ums to user
     * @param permission It is storing array of service types of permisssions
     */
    PermissionService.prototype.updatedPermission = function (permission) {
        if (permission && permission.length) {
            return this.isPermission(permission);
        }
        else if (permission && !permission.length) {
            this.displayService = false;
            this.serviceMenuEmit.emit([]);
            return [];
        }
        else {
            return this.isNotPermission();
        }
    };
    /**
     * @name isPermission
     * @description This method checks already present services in menu which are assigned to user on permission basis of hq and ums
     * @param permission : It is storing an array of types of permissions to user
     */
    PermissionService.prototype.isPermission = function (permission) {
        this.displayService = false;
        for (var _i = 0, _a = this.serviceMenu; _i < _a.length; _i++) {
            var value = _a[_i];
            for (var _b = 0, _c = value['submenu']; _b < _c.length; _b++) {
                var val = _c[_b];
                for (var _d = 0, _e = val['permission']; _d < _e.length; _d++) {
                    var perm = _e[_d];
                    /**
                     * In this condition display property to the permission object gets appended in case
                     * a user have permission to displayit on html
                    */
                    if (permission.indexOf(perm) > 0) {
                        this.appendDisplayService(value, val);
                    }
                }
            }
        }
        this.serviceMenuEmit.emit(this.serviceMenu);
        var obj = {
            service: this.serviceMenu,
            display: this.displayService
        };
        return obj;
    };
    /**
     * @name isNotPermission
     * @description This method checks if service is in service menu and user have permission in sub menu to display
     * then it will show the service in menu overlay.
     */
    PermissionService.prototype.isNotPermission = function () {
        this.displayService = false;
        for (var _i = 0, _a = this.serviceMenu; _i < _a.length; _i++) {
            var value = _a[_i];
            for (var _b = 0, _c = value['submenu']; _b < _c.length; _b++) {
                var val = _c[_b];
                this.appendDisplayService(value, val);
            }
        }
        this.serviceMenuEmit.emit(this.serviceMenu);
        var obj = {
            service: this.serviceMenu,
            display: this.displayService
        };
        return obj;
    };
    /**
     * @name appendDisplayService
     * @description This method append display service based on user's permissions
     * @param value : Value is group of menu objects
     * @param val : val is storing multiple service of main object
     */
    PermissionService.prototype.appendDisplayService = function (value, val) {
        this.displayService = true;
        value['display'] = true;
        val['display'] = true;
        // It is checking if service is coming from hq then it add url according to the condition
        if (!val['isNotHQ']) {
            val['page_url'] = "" + this.urlLink + val['url'];
        }
        else {
            val['page_url'] = val['url'][this.env];
        }
    };
    /**
     * @name isServiceMenu
     * @description This method is called in service menu component to load service menu
     */
    PermissionService.prototype.isServiceMenu = function () {
        return this.serviceMenuEmit;
    };
    /**
     * @name recentServiceFilter
     * @description This method is used to show current used service from service menu
     * @param as for all Service
     * @param rs for recent Service
     */
    PermissionService.prototype.recentServiceFilter = function (asm, rs) {
        var recent = [];
        if (rs.length) {
            for (var _i = 0, rs_1 = rs; _i < rs_1.length; _i++) {
                var res = rs_1[_i];
                for (var _a = 0, _b = asm.service; _a < _b.length; _a++) {
                    var value = _b[_a];
                    for (var _c = 0, _d = value['submenu']; _c < _d.length; _c++) {
                        var sub = _d[_c];
                        if (res === sub['title'] && sub.display) {
                            recent.push(sub);
                        }
                    }
                }
            }
        }
        return recent;
    };
    PermissionService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [CookiesService,
            MatMenuService,
            DlvHttpService])
    ], PermissionService);
    return PermissionService;
}());
export { PermissionService };
//# sourceMappingURL=permission.service.js.map