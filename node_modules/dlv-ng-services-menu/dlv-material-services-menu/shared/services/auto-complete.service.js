var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { catchError, map } from 'rxjs/operators';
import { MatMenuService } from './menu.service';
import { error } from 'util';
import { DlvHttpService } from 'dlv-ng-auth';
import { MatCenterService } from './center.service';
var AutoCompleteService = /** @class */ (function () {
    function AutoCompleteService(menuService, httpService, centerService) {
        this.menuService = menuService;
        this.httpService = httpService;
        this.centerService = centerService;
        this.allCenter = [];
        this.searchString = '';
        this.isApi = true;
        this.options = this.menuService.getOptions();
    }
    /**
     * @name getCenterApi
     * @description This method is using for getting center data from server using api
     * @param string : It is containing input value which we enter to search
     */
    AutoCompleteService.prototype.getCenterApi = function (string) {
        var params = {
            'active': true,
            'business_unit': this.options['facilityFilters'],
            'suggest': string
        };
        if (this.options['centerStatus'] === 'all') {
            delete params.active;
        }
        if (this.options['centerStatus'] === 'inactive') {
            params.active = false;
        }
        if (this.options['facilityFilters'] && this.options['facilityFilters'].length > 1) {
            delete params.business_unit;
        }
        if (this.options['facilityFilters'] && !this.options['facilityFilters'].length) {
            params.business_unit = ['TRA'];
        }
        var requestOption = {
            url: this.menuService.getApiUrl('faas') + "v2/auto-complete/facility/",
            method: 'GET',
            query: params,
            skipAuthorization: false
        };
        return this.httpService.httpRequest(requestOption)
            .pipe(catchError(this.httpService.handleError), map(this.httpService.responseData));
    };
    /**
     * @name centerApiCall
     * @description this method is using for autocomplete search
     * @param searchQuery : It is containing input value string
     */
    AutoCompleteService.prototype.centerApiCall = function (searchQuery) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.allCenter = [];
            _this.getCenterApi(searchQuery)
                .subscribe(function (response) {
                var result = [];
                var filterCenter = [];
                if (response && response.hasOwnProperty('result') && response['result'].length) {
                    result = response['result'];
                    var centerIds_1 = _this.centerService.getCenterIds();
                    if (centerIds_1 && typeof centerIds_1 === "object") {
                        var filteredCenter = result.filter(function (e) {
                            return centerIds_1.indexOf(e.facility_code) > -1;
                        });
                        result = filteredCenter;
                    }
                    var sortedData = _this.sortData(result, _this.searchString);
                    _this.allCenter = sortedData;
                    _this.isApi = false;
                }
                else {
                    _this.allCenter = [];
                    // console.error('Dont have centers starting with requested text');
                    // return false;
                    resolve(true);
                }
                // This condition showing center list if length of search string is only equal to 2
                if (_this.searchString.length === 2) {
                    _this.centerData = _this.allCenter;
                    resolve(_this.centerData);
                }
                else if (_this.allCenter && _this.allCenter.length) {
                    for (var i = 0; i <= _this.allCenter.length; i++) {
                        if (_this.allCenter[i] && _this.allCenter[i].hasOwnProperty('name')) {
                            var name_1 = _this.allCenter[i].name.toLowerCase();
                            if (name_1.indexOf(_this.searchString) >= 0) {
                                filterCenter.push(_this.allCenter[i]);
                            }
                        }
                    }
                    _this.centerData = filterCenter;
                    resolve(_this.centerData);
                }
                else {
                    _this.centerData = _this.allCenter;
                    resolve(_this.centerData);
                }
            }, function () {
                reject(true);
            });
        });
    };
    /**
     * @name getCenterList
     * @description getting center list basis on search
     * @param searchQuery : it is containing inputvalue
     * @param type : paste or input type
     */
    AutoCompleteService.prototype.getCenterList = function (searchQuery, type) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var data = [];
            _this.searchString = searchQuery;
            // pass the string to the function
            _this.centerApiCall(searchQuery).then(function (res) {
                resolve(res);
            }, function () {
                reject(error);
            });
        });
    };
    /**
     * @name sortData
     * @description Sort by index search data
     * @param data : data is contatining array of matching centers list on behalf of user's search
     * @param searchString : searchQuery is that string which user enter in search box
     */
    AutoCompleteService.prototype.sortData = function (data, searchString) {
        data.sort(function (a, b) {
            var na = a.name.toLowerCase();
            var nb = b.name.toLowerCase();
            return na.indexOf(searchString) - nb.indexOf(searchString);
        });
        return data;
    };
    AutoCompleteService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [MatMenuService,
            DlvHttpService,
            MatCenterService])
    ], AutoCompleteService);
    return AutoCompleteService;
}());
export { AutoCompleteService };
//# sourceMappingURL=auto-complete.service.js.map