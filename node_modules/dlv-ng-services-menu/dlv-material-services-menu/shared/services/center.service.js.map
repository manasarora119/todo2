{"version":3,"file":"center.service.js","sourceRoot":"","sources":["../../../../tmp/src-inlined/dlv-material-services-menu/shared/services/center.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { catchError, map } from 'rxjs/operators';\nimport { DlvHttpService } from 'dlv-ng-auth';\n\nimport { CookiesService } from './cookies.service';\nimport { MatMenuService } from './menu.service';\nimport { Observable } from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs';\n// import 'rxjs/add/observable/of';\n// import 'rxjs/add/operator/catch';\n// import 'rxjs/add/operator/map';\n// import 'rxjs/add/operator/toPromise';\n// import 'rxjs/add/observable/throw';\n\nconst CHUNK_SIZE = 500; // max number of center codes to be sent in api\n\n@Injectable()\nexport class MatCenterService {\n    private env: string;\n    private centerDetail: Object;\n    private selectedCenterDetails: Object;\n    private centerNameArray;\n    private centerIDArray;\n    private selectCenter;\n    private model = false;\n    private selectCenterEmit: EventEmitter<any> = new EventEmitter<any>();\n    private centersDataEmit: EventEmitter<any> = new EventEmitter<any>();\n    private isSelectClick = false;\n    private centerObj: Array<any> = [];\n    public centerCommon;\n\n    constructor(\n        private cookies: CookiesService,\n        private menuService: MatMenuService,\n        private httpService: DlvHttpService\n    ) {\n\n        this.env = this.menuService.getOptions()['environment'];\n        this.centerDetail = {\n            center_name: this.cookies.get(`center_name`) ? this.cookies.get(`center_name`) : '',\n            center_code: this.cookies.get(`center_code`) ? this.cookies.get(`center_code`) : ''\n        };\n\n        this.selectedCenterDetails = {\n            center_name: this.cookies.get(`center_name`) ? this.cookies.get(`center_name`) : '',\n            center_id: this.cookies.get(`center_code`) ? this.cookies.get(`center_code`) : ''\n\n        };\n    }\n\n\n    /**\n     * @name setCenterIds\n     * @description This method is storing center ids in an array form\n     * @param centerIdList\n     */\n    public setCenterIds(centerIdList) {\n        this.centerIDArray = centerIdList;\n    }\n\n\n    /**\n     * @name getCenter\n     * @description This method containing center id corresponding to searched center and hit ums api\n     * @param centerIdList\n     * @returns It returns center codes from api url\n     */\n    public getCenter(centerIdList?) {\n        let centerIdsLength;\n        let faasApiUrl = this.menuService.getApiUrl('faas')\n        centerIdsLength = this.checkCenterIdsCount(centerIdList);\n        let params = \"\";\n\n        let observableArr = [];\n        let iterableLength = Math.ceil(centerIdsLength / CHUNK_SIZE);\n        for (let i = 0; i < iterableLength; i++) {\n\n            let currentCenterIdsCount = this.breakCenterIds(centerIdList, i)\n            params = this.generateCenterListParams(currentCenterIdsCount);\n            let option = {\n                url: `${faasApiUrl}v2/facilities/?facility_code=${params}`,\n                method: 'GET',\n                skipAuthorization: false\n            };\n            observableArr.push(this.httpService.httpRequest(option)\n            .pipe(\n                catchError(this.httpService.handleError),\n                map(this.httpService.responseData)\n            )) //creating array of api call to call in forkjoin\n        }\n\n        let response = {};\n        return new Observable(observer => {\n            forkJoin(observableArr).subscribe(res => {\n                if (res.length) {\n                    res.forEach(r => {\n\n                        //checking and concating all the forkjoin results center details in one object \n                        if (r && r['result'] && r['result']['data'] && r['result']['data'].length) {\n                            if (response && response['result'] && response['result']['data'] && response['result']['data'].length) {\n                                response['result']['data'] = response['result']['data'].concat(r['result']['data']);\n                            } else {\n                                response = r;\n                            }\n                        }\n                    })\n                }\n                observer.next(response);\n                observer.complete();\n            });\n        })\n        \n    }\n\n    \n    /**\n     * @name breakCenterIds this function will break the list of centerids in chunks of 500\n     * @param centerIdList \n     * @param index \n     */\n    breakCenterIds(centerIdList, index) {\n        let start = index * CHUNK_SIZE;\n        let end = CHUNK_SIZE * index + CHUNK_SIZE - 1;\n        let updatedCenterIds = centerIdList.slice(start, end);\n        return updatedCenterIds;\n    }\n\n\n    /**\n     * @name checkCenterIdsCount checking the count of center ids to send in api request\n     * @param centerIds\n     */\n    checkCenterIdsCount(centerIds) {\n        let length = 0;\n        if (typeof centerIds !== 'string') {\n            length = centerIds.length;\n        } else {\n            length = centerIds.split(',').length;\n        }\n        return length;\n    }\n\n\n    /**\n     * @name modifyCenterDataFaas this function will modify the response of faas api center\n     * name to that of previous UMS api\n     * @param centerList \n     * @param response response that we got from the faas api \n     */\n    modifyCenterDataFaas(centerIds, response) {\n\n        let centerList = [];\n        let params = {};\n        if (response && response['result'] && response['result']['data'] && response['result']['data'].length) {\n\n            //check for centerIds whether its an array or a string \n            if (typeof centerIds !== 'string') {\n                centerList = centerIds;\n            } else {\n                centerList = centerIds.split(',');\n            }\n            params['search_results'] = [];\n            centerList.forEach((centerId, idx) => {\n                response['result']['data'].forEach(center => {\n                    if (centerId === center['facility_code']) {\n                        params['search_results'][idx] = center['name'];\n                    }\n                })\n            })\n        } else {\n            params['search_results'] = [];\n        }\n        if (params['search_results'] && params['search_results'].length) {\n            for (let i = 0; i < params['search_results'].length; i++) {\n                if (params['search_results'][i] === undefined) {\n                    params['search_results'][i] = null;\n                }\n            }\n        }\n        return params;\n    }\n\n\n    /**\n     * @name generateCenterListParams this function is arranging the center id/ids into\n     * a comma seperated string to pass it to faas api to get center names\n     * @param list center ids list\n     */\n    generateCenterListParams(list) {\n        let paramsList = \"\";\n        if (typeof list === 'string') {\n            paramsList = list;\n        } else {\n            paramsList = list.join(',');\n        }\n        return paramsList;\n    }\n\n\n    /**\n     * @name setCenterNameArray\n     * @description storing all the center name coming from center name api(Array) and it is based on user search center code\n     * @param centerArray : Containing center names in an array\n     */\n    public setCenterNameArray(centerArray) {\n        this.centerNameArray = centerArray || [];\n    }\n\n    //\n    /**\n     * @name centersArray\n     * @description it returns center name or centerid, if there is no center name\n     */\n    public centersArray() {\n        return this.centerNameArray && this.centerNameArray.length ? this.centerNameArray : this.centerIDArray;\n    }\n\n\n    /**\n     * @name getCenterName\n     * @description This method returns the center name\n     */\n    public getCenterName() {\n        return this.centerDetail ? this.centerDetail['center_name'] : this.centerDetail;\n    }\n\n    /**\n     * @name getCenterId\n     * @description it returns center code\n     * @returns It returns center details like center code and name\n     * @memberof MatCenterService\n     */\n\n    //\n    public getCenterId() {\n        return this.centerDetail ? this.centerDetail['center_code'] : this.centerDetail;\n    }\n\n    /**\n     * @name getCenterIds\n     * @description returns center code based on search match or which is previously stored\n     * @returns returns center code in an array\n     */\n    public getCenterIds() {\n        return this.centerIDArray;\n    }\n\n    /**\n     * @name getSubDomainName\n     * @description it returns sub-domain names\n     */\n    public getSubDomainName() {\n        const parts = location.hostname.split('.');\n        const subdomain = parts.shift();\n\n        if (!parts.length) {\n            return 'localhost';\n        } else if (subdomain === '127') {\n            return '127.0.0.1';\n        } else {\n            return parts.join('.');\n        }\n    }\n\n    /**\n     * @name constructingCenterObject\n     * @description save center code and name,return stored center name in array form\n     */\n    public constructingCenterObject() {\n        let center_code: any;\n        let center_name: any;\n        const centerId = this.getCenterIds();\n        const centerArray = this.centersArray();\n        const centerDetails = [];\n\n        for (let i = 0; i < centerArray.length; i++) {\n            if (centerArray[i]) {\n                center_code = centerId[i];\n                center_name = centerArray[i];\n                centerDetails.push({ center_code, center_name });\n            } else {\n                center_code = centerId[i];\n                center_name = centerId[i];\n                centerDetails.push({ center_code, center_name });\n            }\n        }\n        return centerDetails;\n    }\n\n\n    /**\n     * @name setCentersData\n     * @description When a user gets a centerlist in the api and is not having all center access then\n     * this function creates an object for the given list\n     * @param idList : It is containing centers code\n     * @param nameList : It is containing centers name\n     */\n\n    public setCentersData(idList, nameList) {\n        if (idList.length) {\n            for (let i = 0; i < idList.length; i++) {\n                const code = idList[i];\n                const name = nameList.search_results[i];\n                this.centerObj.push({ code, name });\n            }\n            this.centersDataEmit.emit(this.centerObj);\n        }\n    }\n\n    /**\n     * @name getUsersFacilityDetails\n     * @description This method is returning object to above function\n     */\n    public getUsersFacilityDetails() {\n        return this.centersDataEmit;\n    }\n    /**\n\n     * @name allCenterData\n     * @description This method is used to provide all center data\n     * @returns It returns details of all center\n     */\n    public allCenterData() {\n        return this.centerDetail;\n    }\n\n    /**\n     * @name setCenterManually\n     * @description this is wrapper function to set center name manually on behalf of center id and type also save it into cookies\n     * @param center : center is containing center code and center type\n     * @returns it returns center name on behalf of center id\n     */\n    public setCenterManually(center) {\n        this.getCenter([center.center_code])\n            .subscribe(res => {\n                center.center_name = res && res['search_results'].length ?  res['search_results'][0]: ''\n                this.setcentercookie(center);\n                this.setSelectedCenter(center.center_name, center.center_code, center.center_type || 'new');\n            });\n\n        return this;\n    }\n\n\n    /**\n     * @name delCenterCookie\n     * @description this method is using to delete center details from cookies\n     */\n\n    public delCenterCookie() {\n        this.cookies.del(`center_name`, this.getSubDomainName());\n        this.cookies.del(`center_code`, this.getSubDomainName());\n    }\n\n    /**\n     * @name setcentercookie\n     * @description this method is storing the center name and center code in cookies\n     * @param center : center is containing center code and center name\n     */\n\n    public setcentercookie(center) {\n        const subdomain = this.getSubDomainName();\n        this.cookies.store(`center_name`, center.center_name, '', subdomain, '/');\n        this.cookies.store(`center_code`, center.center_code, '', subdomain, '/');\n    }\n\n    /**\n     * @name setSelectedCenter\n     * @description This method storing center name, code and type of center in selectedCenterDetails object\n     * @param center : it is used as center name\n     * @param centerId : it is used as center id\n     * @param type : it is used as type i.e. pre or new\n     */\n\n    public setSelectedCenter(center?, centerId?, type?) {\n        this.selectCenter = center;\n        this.selectedCenterDetails = {\n            center_id: centerId,\n            center_name: center,\n            type: type\n        }\n        // Emit selected center details\n        this.selectCenterEmit.emit(this.selectedCenterDetails)\n    }\n\n    /**\n     * @name processSelectCenter\n     * @description This method works when user select center through setSelectedCenter() from center modal and\n     * It is storing center code, name and it's type as well as storing in cookies through setcentercookie() ,\n     * Checking selection status through setIsSelected()\n     * @param center : It is containing center code and center name\n     */\n    public processSelectCenter(center) {\n        this.setIsSelected(true);\n        this.setcentercookie(center);\n        this.setSelectedCenter(center.center_name, center.center_code, 'new');\n    }\n\n    /**\n     * @name setCheckModel\n     * @description used for open modal if modelOpen is true\n     * @param modelOpen : search dropdown\n     */\n    public setCheckModel(modelOpen) {\n        this.model = modelOpen;\n    }\n\n    /**\n     * @name getCheckModal\n     * @description used for check current status model ie true or false\n     */\n    public getCheckModal() {\n        return this.model;\n    }\n\n    /**\n     * @name getSelectedCenter\n     * @description This method is used to provide all center details\n     * @returns it returns center code, name and type of center\n     */\n\n    public getSelectedCenter() {\n        return this.selectedCenterDetails;\n    }\n\n    /**\n     * @name setIsSelected\n     * @description This method is checking that user have made a click to select the center or not\n     * @param it is containing center code and center name value\n     */\n\n    public setIsSelected(val?) {\n        this.isSelectClick = val || false;\n    }\n\n    /**\n     * @name isSelectCenter\n     * @description returning the click status of selected center\n     * @returns It returns the select center status\n     */\n\n    public isSelectCenter() {\n        return this.isSelectClick;\n    }\n\n    /**\n     *\n     * This method is listen from Other Service/Component\n     * @returns Emit Center details on center change\n     * @memberof MatCenterService\n     */\n    public onCenterChange() {\n        return this.selectCenterEmit;\n    }\n}\n"]}