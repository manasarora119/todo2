import { EventEmitter } from '@angular/core';
import { DlvHttpService } from 'dlv-ng-auth';
import { CookiesService } from './cookies.service';
import { MatMenuService } from './menu.service';
import { Observable } from 'rxjs/Observable';
export declare class MatCenterService {
    private cookies;
    private menuService;
    private httpService;
    private env;
    private centerDetail;
    private selectedCenterDetails;
    private centerNameArray;
    private centerIDArray;
    private selectCenter;
    private model;
    private selectCenterEmit;
    private centersDataEmit;
    private isSelectClick;
    private centerObj;
    centerCommon: any;
    constructor(cookies: CookiesService, menuService: MatMenuService, httpService: DlvHttpService);
    /**
     * @name setCenterIds
     * @description This method is storing center ids in an array form
     * @param centerIdList
     */
    setCenterIds(centerIdList: any): void;
    /**
     * @name getCenter
     * @description This method containing center id corresponding to searched center and hit ums api
     * @param centerIdList
     * @returns It returns center codes from api url
     */
    getCenter(centerIdList?: any): Observable<{}>;
    /**
     * @name breakCenterIds this function will break the list of centerids in chunks of 500
     * @param centerIdList
     * @param index
     */
    breakCenterIds(centerIdList: any, index: any): any;
    /**
     * @name checkCenterIdsCount checking the count of center ids to send in api request
     * @param centerIds
     */
    checkCenterIdsCount(centerIds: any): number;
    /**
     * @name modifyCenterDataFaas this function will modify the response of faas api center
     * name to that of previous UMS api
     * @param centerList
     * @param response response that we got from the faas api
     */
    modifyCenterDataFaas(centerIds: any, response: any): {};
    /**
     * @name generateCenterListParams this function is arranging the center id/ids into
     * a comma seperated string to pass it to faas api to get center names
     * @param list center ids list
     */
    generateCenterListParams(list: any): string;
    /**
     * @name setCenterNameArray
     * @description storing all the center name coming from center name api(Array) and it is based on user search center code
     * @param centerArray : Containing center names in an array
     */
    setCenterNameArray(centerArray: any): void;
    /**
     * @name centersArray
     * @description it returns center name or centerid, if there is no center name
     */
    centersArray(): any;
    /**
     * @name getCenterName
     * @description This method returns the center name
     */
    getCenterName(): any;
    /**
     * @name getCenterId
     * @description it returns center code
     * @returns It returns center details like center code and name
     * @memberof MatCenterService
     */
    getCenterId(): any;
    /**
     * @name getCenterIds
     * @description returns center code based on search match or which is previously stored
     * @returns returns center code in an array
     */
    getCenterIds(): any;
    /**
     * @name getSubDomainName
     * @description it returns sub-domain names
     */
    getSubDomainName(): string;
    /**
     * @name constructingCenterObject
     * @description save center code and name,return stored center name in array form
     */
    constructingCenterObject(): any[];
    /**
     * @name setCentersData
     * @description When a user gets a centerlist in the api and is not having all center access then
     * this function creates an object for the given list
     * @param idList : It is containing centers code
     * @param nameList : It is containing centers name
     */
    setCentersData(idList: any, nameList: any): void;
    /**
     * @name getUsersFacilityDetails
     * @description This method is returning object to above function
     */
    getUsersFacilityDetails(): EventEmitter<any>;
    /**

     * @name allCenterData
     * @description This method is used to provide all center data
     * @returns It returns details of all center
     */
    allCenterData(): Object;
    /**
     * @name setCenterManually
     * @description this is wrapper function to set center name manually on behalf of center id and type also save it into cookies
     * @param center : center is containing center code and center type
     * @returns it returns center name on behalf of center id
     */
    setCenterManually(center: any): this;
    /**
     * @name delCenterCookie
     * @description this method is using to delete center details from cookies
     */
    delCenterCookie(): void;
    /**
     * @name setcentercookie
     * @description this method is storing the center name and center code in cookies
     * @param center : center is containing center code and center name
     */
    setcentercookie(center: any): void;
    /**
     * @name setSelectedCenter
     * @description This method storing center name, code and type of center in selectedCenterDetails object
     * @param center : it is used as center name
     * @param centerId : it is used as center id
     * @param type : it is used as type i.e. pre or new
     */
    setSelectedCenter(center?: any, centerId?: any, type?: any): void;
    /**
     * @name processSelectCenter
     * @description This method works when user select center through setSelectedCenter() from center modal and
     * It is storing center code, name and it's type as well as storing in cookies through setcentercookie() ,
     * Checking selection status through setIsSelected()
     * @param center : It is containing center code and center name
     */
    processSelectCenter(center: any): void;
    /**
     * @name setCheckModel
     * @description used for open modal if modelOpen is true
     * @param modelOpen : search dropdown
     */
    setCheckModel(modelOpen: any): void;
    /**
     * @name getCheckModal
     * @description used for check current status model ie true or false
     */
    getCheckModal(): boolean;
    /**
     * @name getSelectedCenter
     * @description This method is used to provide all center details
     * @returns it returns center code, name and type of center
     */
    getSelectedCenter(): Object;
    /**
     * @name setIsSelected
     * @description This method is checking that user have made a click to select the center or not
     * @param it is containing center code and center name value
     */
    setIsSelected(val?: any): void;
    /**
     * @name isSelectCenter
     * @description returning the click status of selected center
     * @returns It returns the select center status
     */
    isSelectCenter(): boolean;
    /**
     *
     * This method is listen from Other Service/Component
     * @returns Emit Center details on center change
     * @memberof MatCenterService
     */
    onCenterChange(): EventEmitter<any>;
}
