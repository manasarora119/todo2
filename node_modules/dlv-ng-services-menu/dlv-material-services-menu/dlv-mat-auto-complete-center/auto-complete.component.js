var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input, Output, EventEmitter, ViewChild } from '@angular/core';
import { MatCenterService, AutoCompleteService } from '../shared/services';
import { Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
var DEBOUNCE_TIME_LIMIT = 500; //  500 mili seconds
var MIN_INPUT_CHAR_REQUIRED = 2; // alteast 2 characters
var DlvMatAutoCompleteComponent = /** @class */ (function () {
    function DlvMatAutoCompleteComponent(autoComplete, centerService) {
        this.autoComplete = autoComplete;
        this.centerService = centerService;
        this.onCenterChange = new EventEmitter();
        this.isLoader = false;
        // public isResult : boolean = false;
        this.isError = false;
        this.isData = false;
        this.isPasteCenter = false;
        this.customInput = new Subject();
        this.autoFocuse = false;
    }
    DlvMatAutoCompleteComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.customInput.pipe(debounceTime(DEBOUNCE_TIME_LIMIT)).subscribe(function (value) {
            if (value.length >= MIN_INPUT_CHAR_REQUIRED) {
                _this.autoComplete.getCenterList(value.toLowerCase(), _this.isPasteCenter)
                    .then(function (response) {
                    _this.isLoader = false;
                    // this.isResult = true;
                    // this is checking if there is any data(centers) mathces to user's search then it stored in itemList which is in array form
                    if (_this.isData) {
                        _this.itemList = response;
                    }
                    _this.isPasteCenter = false;
                }, function (error) {
                    _this.isPasteCenter = false;
                    _this.itemList = false;
                    _this.isLoader = false;
                    // this.isResult = false;
                    _this.isError = false;
                    // checking errors
                    if (error) {
                        _this.isError = true;
                        _this.isLoader = false;
                    }
                    else if (!_this.isData) {
                        // this.isResult = true;
                        _this.isLoader = false;
                    }
                });
            }
        });
    };
    DlvMatAutoCompleteComponent.prototype.ngOnChanges = function () {
        var _this = this;
        setTimeout(function () {
            _this.autoCompInput.nativeElement.focus();
        }, 0);
    };
    //
    /**
     * @name pasteEvent
     * @description This is for paste event, if user paste the center in input field
     * @param event It is containing paste event
     */
    DlvMatAutoCompleteComponent.prototype.pasteEvent = function (event) {
        if (event['type'] === "paste") {
            this.isPasteCenter = true;
        }
    };
    /**
     * @name filter
     * @description it is checking length of string if it is greater than or equal to 2 den it will only show the itemlist
     * @param val : it is containing value which user enter in input field to search
     */
    DlvMatAutoCompleteComponent.prototype.filter = function (val, event) {
        // debounce the input 
        this.customInput.next(val);
        this.isError = false;
        if (val && val.length >= 2) {
            this.isLoader = true;
            this.isData = true;
            // this.isResult = false;
            // This condition checks length of input value field which should be equal to 2
            if (val.length === 2) {
                this.itemList = false;
            }
        }
        // If val is not greater than or eqaul to 2 then it will not show any itemlist and data
        else {
            this.isData = false;
            this.itemList = false;
            this.isLoader = false;
        }
    };
    /**
     * @name onCenterSelect
     * @description selecting center name and code on behalf of facility id,key and name and emitting the center.
     * @param center: center is storing facility id,facility integration key and facility name
     *
     */
    DlvMatAutoCompleteComponent.prototype.onCenterSelect = function (center) {
        var selectCenter = {
            center_name: center.name,
            center_code: center.facility_code
        };
        this.closeSearchCenter();
        this.onCenterChange.emit(selectCenter); // here selectCenter is storing selected center and code
        this.autoFocuse = false;
    };
    /**
     * @name closeSearchCenter
     * @description after select center from search, this fucntion is called to close search dropdown
     */
    DlvMatAutoCompleteComponent.prototype.closeSearchCenter = function () {
        this.centerService.setCheckModel(true);
    };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], DlvMatAutoCompleteComponent.prototype, "open", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], DlvMatAutoCompleteComponent.prototype, "label", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], DlvMatAutoCompleteComponent.prototype, "placeholder", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DlvMatAutoCompleteComponent.prototype, "onCenterChange", void 0);
    __decorate([
        ViewChild('autoCompleteInput'),
        __metadata("design:type", Object)
    ], DlvMatAutoCompleteComponent.prototype, "autoCompInput", void 0);
    DlvMatAutoCompleteComponent = __decorate([
        Component({
            selector: 'dlv-mat-auto-complete-center',
            template: "\n    <div class=\"center-form-search\">\n      <span class=\"material-icons \">search</span>\n\n      <!-- =========================== -->\n      <!-- === Center search input === -->\n      <!-- =========================== -->\n      <input type=\"text\" [placeholder]=\"placeholder\" class=\"search-center\" [(ngModel)]=\"inputValue\" (ngModelChange)=\"filter(inputValue, $event)\" (paste)=\"pasteEvent($event)\" #autoCompleteInput />\n    </div>\n    <mat-list class=\"list-height\" *ngIf=\"itemList && itemList.length\">\n      <mat-list-item class=\"center-name-list\" (click)=\"onCenterSelect(item)\" *ngFor=\"let item of itemList\"> {{item.name}}\n      </mat-list-item>\n    </mat-list>\n\n    <p class=\"no_result\" *ngIf=\"!isLoader && itemList && !itemList.length\">No Search Result.</p>\n    <p class=\"no_result\" *ngIf=\"isError\">Not able to fetch centers.</p>\n\n    <div class=\"loader\" *ngIf=\"isLoader\">\n      <span class=\"line-spinner\"></span>\n    </div>\n  ",
            styles: ["\n    .centerName{text-align:center}.centerName span{cursor:pointer}.center-form-search{position:relative;background:#eee;border-radius:3px}.center-form-search span{position:absolute;left:14px;top:9px;color:#939696;font-size:22px}.search-center{width:calc(100% - 40px);padding:8px 5px;margin-left:31px;border:none;border-radius:0;font-size:12px;line-height:18px;color:#414042;padding-bottom:10px;background:transparent}.search-center:focus{border-color:transparent;outline:none;box-shadow:none}.center-list{margin:0 0;border-radius:1px;font-size:12px;color:#414042;background:#ffffff;padding:0;margin:0;max-height:140px;text-align:left;overflow-y:auto;width:100%}.center-name-list{list-style:none;width:calc(100% - 10px);cursor:pointer;font-size:14px;display:block;transition:all 0.3s linear}.center-name-list:hover{background:#ececec}.single-center{font-size:15px;text-align:center;margin:18% 0}.single-center .single-center-name{font-size:18px;margin-top:10px;display:block}.no-center{font-size:16px;text-align:center;margin:22% 0}.no_result{color:#000}.loading-centers{background:#BDBDBD;position:absolute;width:100%;height:100%}.loading-centers .status{top:40%;text-align:center;position:relative}.loader{margin-top:10px}.line-spinner{border:3px solid #000;border-top:3px solid rgba(255,0,0,0);border-radius:50%;width:20px;height:20px;-webkit-animation:spin 2s linear infinite;animation:spin 1s linear infinite;display:inline-block;vertical-align:middle;margin:0 auto;display:table}.list-height{max-height:150px;overflow:scroll}.search-center{padding:8px 8px 8px 38px;margin-left:0px;border:1px solid transparent;border-radius:3px;font-size:13px;line-height:21px;color:#414042;background:transparent}@keyframes spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}\n  "]
        }),
        __metadata("design:paramtypes", [AutoCompleteService, MatCenterService])
    ], DlvMatAutoCompleteComponent);
    return DlvMatAutoCompleteComponent;
}());
export { DlvMatAutoCompleteComponent };
//# sourceMappingURL=auto-complete.component.js.map