import { OnInit, EventEmitter, DoCheck } from '@angular/core';
import { AuthService } from 'dlv-ng-auth';
import { MatMenuService, MatCenterService, PermissionService, CookiesService } from '../shared/services';
import { menuConfiguration } from '../shared/interfaces';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/observable/throw';
export declare class DlvMatServicesMenuComponent implements OnInit, DoCheck {
    private cookies;
    private authService;
    private menuService;
    private permService;
    private centerService;
    centerList: Array<any>;
    styles: string;
    menuTitle: string;
    searchPlaceholder: string;
    onCenterChange: EventEmitter<any>;
    onCenterDropdownOpen: EventEmitter<boolean>;
    onWaybillDropdownOpen: EventEmitter<boolean>;
    private showOverlay;
    private isLoading;
    loadModal: boolean;
    profile: object;
    private openCenters;
    private centerLoader;
    private isServiceLoader;
    errors: Array<any>;
    private errMsg;
    options: menuConfiguration;
    private centerIDArray;
    private centerNameArray;
    private centersNameArray;
    private centerId;
    private centerName;
    private isCenterList;
    private isCenterNotInList;
    private env;
    private isAllCenter;
    showMenuOverlay: boolean;
    showMoreOptions: boolean;
    private mobileOverlay;
    showWaybill: boolean;
    showCenter: boolean;
    tempOpenWaybill: any;
    tempOpenCenter: any;
    isMobServicesHidden: boolean;
    waybillAutofocus: boolean;
    constructor(cookies: CookiesService, authService: AuthService, menuService: MatMenuService, permService: PermissionService, centerService: MatCenterService);
    ngOnInit(): void;
    ngDoCheck(): void;
    /**
     * @name checkServiceMenu
     * @description this is to load menu component as per based on permission to user
     */
    private checkServiceMenu;
    /**
     * @name getUserInfo
     * @scope private
     *
     * @description
     * To get logged in information
     *
     */
    private getUserInfo;
    /**
     * @name fetchCenter
     * @param centerList : storing the list of centers based on logged in user
     * @param userinfo : storing the profile of user
     */
    private fetchCenter;
    /**
     * @name getCenters
     * @description this method is to get names of center based on center ID
     * @param centerIds : Containing center ids
     */
    private getCenters;
    /**
     * @name checkCenter
     * @description this method is using to show center search box,
     * @param centerList :centerList is storing center from cookies
     */
    checkCenter(centerList?: any): void;
    /**
     * @name openOverlay
     * @description this method is for show overlay on service menu if service menu is there
     */
    private openOverlay;
    /**
     * @name checkLength
     * @description This method holds the overlay component loading till the api response complete
     * @param obj : It is holding the user profile object
     *
     */
    checkLength(obj: any): number;
    /**
     * @name openSearchDropdown
     * @description this method to show center serch dropdown
     */
    private openSearchDropdown;
    /**
     * @name openSearchDropdown
     * @description this method to close center serch dropdown
     */
    private closeDropdown;
    /**
     * @name centerChange
     * @description this method is called when user select another center from search box
     * @param center : It is containing center code and name
     */
    centerChange(center: any): void;
    /**
     * @name closeServiceMenu
     * @description this method works when we click outside the menu overlay through click-outside directive.
     * @param isInside : It is containing menu overlay
     */
    closeServiceMenu(isInside: any): void;
    /**
     * @name closeCenterDrop
     * @description this method works when we click outside the search dropdown through click-outside directive.
     * @param isInside : It is containing center search dropdown
     */
    closeCenterDrop(isInside: any): void;
    /**
     * @name showError
     * @description this method is using to show all errors through error directive
     * @param errorMsg : it is containing error msg
     */
    showError(errorMsg: any): void;
    /**
     * @name moreOptions
     * @description this method is using the mobile menu click
     * @param : none
     */
    moreOptions(): void;
    /**
     * @name openMobOverlay
     * @description this method is used to open the overlay in mobile
     * @param : none
     */
    openMobOverlay(): void;
    /**
     * @name closeOverlay
     * @description this method is used to close overlay, | clickoutSide directive callback
     * @param evt: An event will trigger to check wheather inside or outside click
     */
    closeOverlay(evt: any): void;
    /**
     * Mobile waybill search toggle functionality;
     */
    searchWaybill(): void;
    closeWaybill(isInside: any): void;
    /**
     * center search toggle functionality;
     */
    searchCenterMob(): void;
    closeCenterDropMob(isInside: any): void;
    canWeHideInMobile(event: any): void;
}
