var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { AuthService } from 'dlv-ng-auth';
import { MatMenuService, MatCenterService, PermissionService, CookiesService } from '../shared/services';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/observable/throw';
var DlvMatServicesMenuComponent = /** @class */ (function () {
    function DlvMatServicesMenuComponent(cookies, authService, menuService, permService, centerService) {
        this.cookies = cookies;
        this.authService = authService;
        this.menuService = menuService;
        this.permService = permService;
        this.centerService = centerService;
        this.onCenterChange = new EventEmitter();
        this.onCenterDropdownOpen = new EventEmitter();
        this.onWaybillDropdownOpen = new EventEmitter();
        this.showOverlay = false;
        this.isLoading = true;
        this.loadModal = false;
        this.profile = {};
        this.openCenters = false;
        this.centerLoader = false;
        this.isServiceLoader = false;
        this.errors = [];
        this.isCenterList = false;
        this.isCenterNotInList = false;
        this.isAllCenter = false;
        this.showMenuOverlay = false;
        this.showMoreOptions = false;
        this.mobileOverlay = false;
        this.showWaybill = false;
        this.showCenter = false;
        this.isMobServicesHidden = false;
        this.options = menuService.getOptions();
        this.env = this.menuService.getOptions()['environment'];
        this.searchPlaceholder = this.searchPlaceholder ? this.searchPlaceholder : 'Search Waybill/Order Number';
    }
    DlvMatServicesMenuComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.getUserInfo();
        this.permService.getHQPermission().subscribe(function (res) {
            if (res && res['superuser']) {
                _this.isMobServicesHidden = res['superuser'];
            }
        });
    };
    DlvMatServicesMenuComponent.prototype.ngDoCheck = function () {
        if (this.centerService.getCenterIds()) {
            this.centerIDArray = this.centerService.getCenterIds();
        }
        else {
            this.centerIDArray = [];
        }
        if (this.centerService.getSelectedCenter() && this.isCenterList) {
            if (this.isCenterNotInList && !this.centerService.isSelectCenter()) {
                this.centerName = '';
            }
            else {
                this.centerName = this.centerService.getSelectedCenter()['center_name'] || '';
                // console.log("centerName",this.centerName);
            }
            this.centerLoader = true;
        }
        this.checkServiceMenu();
    };
    /**
     * @name checkServiceMenu
     * @description this is to load menu component as per based on permission to user
     */
    DlvMatServicesMenuComponent.prototype.checkServiceMenu = function () {
        var _this = this;
        this.permService.isServiceMenu()
            .toPromise().then(function (res) {
            // if there is result then loader will not show to user
            if (res && res.length) {
                _this.isServiceLoader = false;
            }
            else { // if there is no result then loader show to user
                _this.isServiceLoader = true;
            }
        }).catch(function (err) {
            _this.isServiceLoader = true;
        });
    };
    /**
     * @name getUserInfo
     * @scope private
     *
     * @description
     * To get logged in information
     *
     */
    DlvMatServicesMenuComponent.prototype.getUserInfo = function () {
        var _this = this;
        this.authService.getUserProfile({
            server: true
        })
            .subscribe(function (res) {
            _this.profile = res;
            _this.fetchCenter(_this.centerList, _this.profile);
        }, function (error) {
            _this.showError('Not able to fetch User details.');
        });
    };
    /**
     * @name fetchCenter
     * @param centerList : storing the list of centers based on logged in user
     * @param userinfo : storing the profile of user
     */
    DlvMatServicesMenuComponent.prototype.fetchCenter = function (centerList, userinfo) {
        if (userinfo && userinfo.is_active && userinfo.is_staff) {
            this.menuService.setActiveStaff();
        }
        // if user already have center list then auto complete directive will not be accessable
        if (centerList && centerList.length) {
            this.isAllCenter = false;
            this.getCenters(centerList);
        }
        else if ( // checking user have all access of centers
        userinfo &&
            userinfo.user_data &&
            (userinfo.user_data.all_center_access || userinfo.read_all_facility || userinfo.write_all_facility)) {
            this.isAllCenter = true;
            // here user getting center code on based of stored center code
            var centerCode = this.cookies.get("center_code") || false;
            if (centerCode) {
                this.getCenters(centerCode);
            }
            else {
                this.isCenterList = true;
                this.loadModal = true;
                this.centerLoader = true;
                // this.centerName = '';
                this.checkCenter();
            }
        }
        else if ( // this is checking if user's data, user facility id and it's length then it stored center id
        userinfo &&
            userinfo.user_data &&
            userinfo.user_data.facility_id &&
            userinfo.user_data.facility_id.length) {
            var centerIds = userinfo.user_data.facility_id;
            this.getCenters(centerIds);
        }
        else {
            this.showError('Not able to fetch Centers Tagged to the User.');
            this.centerLoader = true;
        }
    };
    /**
     * @name getCenters
     * @description this method is to get names of center based on center ID
     * @param centerIds : Containing center ids
     */
    DlvMatServicesMenuComponent.prototype.getCenters = function (centerIds) {
        var _this = this;
        if (this.options['showCenter']) {
            this.centerService.setCenterIds(centerIds);
            this.centerService.getCenter(centerIds)
                .subscribe(function (response) {
                /**
                 * this is checking if there is any center id stored then it will store in an array and its length
                 * and return center name through getCenterName()
                 */
                if (response && response['result'] && response['result']['data'] && response['result']['data'].length) {
                    response = _this.centerService.modifyCenterDataFaas(centerIds, response);
                    _this.centerService.setCentersData(centerIds, response);
                    var result = response['search_results'];
                    _this.centerService.setCenterNameArray(result);
                    var name_1 = _this.centerService.getCenterName();
                    _this.centerId = _this.centerService.getCenterId();
                    var index = centerIds.indexOf(_this.centerId);
                    /**
                     * Here we checking if there is any data in array, if yes then it call setcenterCookie()
                     * and return center name and center code, then shows it's status pre because it is already stored in cookie
                     */
                    if (index >= 0) {
                        _this.centerName = result[index];
                        var center = {
                            center_code: _this.centerId,
                            center_name: _this.centerName
                        };
                        _this.centerService.setcentercookie(center);
                        _this.centerService.setSelectedCenter(_this.centerName, _this.centerId, 'pre');
                    }
                    else { // If no data in array, then it calls delete cookie and set center on basis of user search
                        _this.centerService.delCenterCookie();
                        _this.centerService.setSelectedCenter();
                    }
                    _this.isCenterList = true;
                    _this.checkCenter(centerIds);
                    // This is loading center model box
                    if (_this.centerService.getCheckModal()) {
                        _this.centerLoader = true;
                    }
                }
            }, function (error) {
                _this.showError('Not able to fetch Center name.');
                _this.centerName = _this.centerService.getCenterName();
                _this.centerId = _this.centerService.getCenterId();
                _this.isCenterList = true;
                _this.centerLoader = true;
                _this.checkCenter(centerIds);
            });
        }
    };
    /**
     * @name checkCenter
     * @description this method is using to show center search box,
     * @param centerList :centerList is storing center from cookies
     */
    DlvMatServicesMenuComponent.prototype.checkCenter = function (centerList) {
        if (!this.centerId) {
            this.loadModal = true;
            this.isCenterNotInList = true;
        }
        else {
            var centerIndex = centerList.indexOf(this.centerId);
            if (centerIndex === -1 || centerIndex === null) {
                this.isCenterNotInList = true;
                this.centerName = '';
                this.loadModal = true;
            }
            else {
                this.centerLoader = true;
                this.loadModal = false;
            }
        }
    };
    /**
     * @name openOverlay
     * @description this method is for show overlay on service menu if service menu is there
     */
    DlvMatServicesMenuComponent.prototype.openOverlay = function () {
        this.showOverlay = !this.showOverlay;
    };
    /**
     * @name checkLength
     * @description This method holds the overlay component loading till the api response complete
     * @param obj : It is holding the user profile object
     *
     */
    DlvMatServicesMenuComponent.prototype.checkLength = function (obj) {
        return Object.keys(obj).length;
    };
    /**
     * @name openSearchDropdown
     * @description this method to show center serch dropdown
     */
    DlvMatServicesMenuComponent.prototype.openSearchDropdown = function () {
        this.openCenters = !this.openCenters;
        this.onCenterDropdownOpen.emit(this.openCenters);
    };
    /**
     * @name openSearchDropdown
     * @description this method to close center serch dropdown
     */
    DlvMatServicesMenuComponent.prototype.closeDropdown = function () {
        debugger;
        this.openSearchDropdown();
    };
    /**
     * @name centerChange
     * @description this method is called when user select another center from search box
     * @param center : It is containing center code and name
     */
    DlvMatServicesMenuComponent.prototype.centerChange = function (center) {
        this.onCenterChange.emit(center);
    };
    /**
     * @name closeServiceMenu
     * @description this method works when we click outside the menu overlay through click-outside directive.
     * @param isInside : It is containing menu overlay
     */
    DlvMatServicesMenuComponent.prototype.closeServiceMenu = function (isInside) {
        if (!isInside) {
            this.showOverlay = false;
        }
    };
    /**
     * @name closeCenterDrop
     * @description this method works when we click outside the search dropdown through click-outside directive.
     * @param isInside : It is containing center search dropdown
     */
    DlvMatServicesMenuComponent.prototype.closeCenterDrop = function (isInside) {
        if (!isInside) {
            this.openCenters = false;
        }
    };
    /**
     * @name showError
     * @description this method is using to show all errors through error directive
     * @param errorMsg : it is containing error msg
     */
    DlvMatServicesMenuComponent.prototype.showError = function (errorMsg) {
        if (errorMsg) {
            this.errors.push(errorMsg);
        }
        else {
            this.errors.push('Something Error.');
        }
    };
    /**
     * @name moreOptions
     * @description this method is using the mobile menu click
     * @param : none
     */
    DlvMatServicesMenuComponent.prototype.moreOptions = function () {
        this.showMoreOptions = !this.showMoreOptions;
    };
    /**
     * @name openMobOverlay
     * @description this method is used to open the overlay in mobile
     * @param : none
     */
    DlvMatServicesMenuComponent.prototype.openMobOverlay = function () {
        this.mobileOverlay = true;
        this.showMoreOptions = true;
    };
    /**
     * @name closeOverlay
     * @description this method is used to close overlay, | clickoutSide directive callback
     * @param evt: An event will trigger to check wheather inside or outside click
     */
    DlvMatServicesMenuComponent.prototype.closeOverlay = function (evt) {
        if (this.showMoreOptions && this.mobileOverlay && !evt) {
            this.showMenuOverlay = true;
        }
        else if (evt) {
            this.showMenuOverlay = true;
        }
        else {
            this.showMenuOverlay = false;
        }
        this.showMoreOptions = false;
        this.mobileOverlay = false;
    };
    /**
     * Mobile waybill search toggle functionality;
     */
    DlvMatServicesMenuComponent.prototype.searchWaybill = function () {
        this.showWaybill = !this.showWaybill;
        this.tempOpenWaybill = true;
        this.showCenter = false;
        this.waybillAutofocus = true;
    };
    DlvMatServicesMenuComponent.prototype.closeWaybill = function (isInside) {
        if (!isInside && !this.tempOpenWaybill) {
            this.showWaybill = false;
            this.waybillAutofocus = false;
        }
        this.tempOpenWaybill = false;
    };
    /**
     * center search toggle functionality;
     */
    DlvMatServicesMenuComponent.prototype.searchCenterMob = function () {
        this.showCenter = !this.showCenter;
        this.tempOpenCenter = true;
        this.showWaybill = false;
    };
    DlvMatServicesMenuComponent.prototype.closeCenterDropMob = function (isInside) {
        if (!isInside && !this.tempOpenCenter) {
            this.showCenter = false;
        }
        this.tempOpenCenter = false;
    };
    DlvMatServicesMenuComponent.prototype.canWeHideInMobile = function (event) {
        this.isMobServicesHidden = event;
    };
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], DlvMatServicesMenuComponent.prototype, "centerList", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], DlvMatServicesMenuComponent.prototype, "styles", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], DlvMatServicesMenuComponent.prototype, "menuTitle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], DlvMatServicesMenuComponent.prototype, "searchPlaceholder", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DlvMatServicesMenuComponent.prototype, "onCenterChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DlvMatServicesMenuComponent.prototype, "onCenterDropdownOpen", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DlvMatServicesMenuComponent.prototype, "onWaybillDropdownOpen", void 0);
    DlvMatServicesMenuComponent = __decorate([
        Component({
            changeDetection: ChangeDetectionStrategy.Default,
            selector: 'dlv-mat-services-menu',
            template: "\n    <dlv-mat-error-alert [errorMsg]=\"errors\" *ngIf=\"errors.length\"></dlv-mat-error-alert>\n    <div class=\"row service-menu-section\" *ngIf=\"options.showServices || options.showWaybill || options.showCenter\" [ngClass]=\"styles\">\n        <div class=\"service-menu-inner\">\n            <div class=\"service-menu\" *ngIf=\"options.showServices\">\n                <div class=\"child-section\" (clickOutside)=\"closeServiceMenu($event)\">\n                    <p class=\"service-menu-overlay\" [ngClass]=\"{'open' : showOverlay}\">\n                         <span (click)=\"openOverlay()\" class=\"material-icons serviceBtn dlv-icon\" [class.hide]=\"isServiceLoader\">\n                            apps \n                        </span>\n                        <span class=\"line-spinner\" [hidden]=\"!isServiceLoader\"></span>\n                    </p>\n                    <dlv-mat-services-menu-overlay *ngIf=\"checkLength(profile)\" [open]=\"showOverlay\" [profile]=\"profile\" (onError)=\"showError($event)\"></dlv-mat-services-menu-overlay>\n                </div>\n            </div>\n\n            <div class=\"waybill-search\" *ngIf=\"options.showWaybill\">\n                <dlv-mat-waybill-search [placeHolder]=\"searchPlaceholder\"></dlv-mat-waybill-search>\n            </div>\n\n            <div class=\"selected-center\" *ngIf=\"options.showCenter\">\n                <div class=\"child-section\" (clickOutside)=\"closeCenterDrop($event)\">\n                    <p class=\"centerName clearfix\">\n                        <!-- <span class=\"label\">Selected Center : {{ options.showCenter }}</span> -->\n                        <span class=\"centerName-cont\" *ngIf=\"centerName\">\n                            <p class=\"name\">{{centerName}} &nbsp;</p>\n                            <i class=\"material-icons select-dropdown\" (click)=\"openSearchDropdown()\" *ngIf=\"!isAllCenter && centerIDArray.length > 1\">expand_more</i>\n                            <i class=\"material-icons select-dropdown\" (click)=\"openSearchDropdown()\" *ngIf=\"isAllCenter\">expand_more</i>\n                        </span>\n                        <span *ngIf=\"!isAllCenter && centerLoader && !centerName\" (click)=\"openSearchDropdown()\" class=\"centerName-cont\">\n                           <p class=\"name\"> No Center Mapped&nbsp;</p>\n                            <i class=\"material-icons select-dropdown\" *ngIf=\"centerIDArray.length > 1\">expand_more</i>\n                        </span>\n                        <span *ngIf=\"isAllCenter && centerLoader && !centerName\" (click)=\"openSearchDropdown()\" class=\"centerName-cont\">\n                           <p class=\"name\"> No Center Mapped&nbsp;</p>\n                            <i class=\"material-icons select-dropdown\">expand_more</i>\n                        </span>\n                        <span class=\"line-spinner\" *ngIf=\"!centerLoader\"></span> \n                    </p>\n                    <div class=\"select-drop-down\">\n                        <dlv-mat-selected-center *ngIf=\"isAllCenter || centerIDArray.length > 1\" [isAllCenter]=\"isAllCenter\" [open]=\"openCenters\" (closeDropdown)=\"closeDropdown($event)\" (onCenterChange)=\"centerChange($event)\"></dlv-mat-selected-center>\n                    </div>\n                    <!-- <div>\n                        <dlv-mat-center-modal *ngIf=\"loadModal\" [isAllCenter]=\"isAllCenter\" [open]=\"loadModal\" (onCenterChange)=\"centerChange($event)\"></dlv-mat-center-modal>\n                    </div> -->\n                </div>\n            </div>\n        </div>\n        <div class=\"service-menu-mobile\">\n            <ul class=\"sm-icons\">\n                <li class=\"sm-search\" *ngIf=\"options.showWaybill\">\n                     <button class=\"dlv-icon\" mat-icon-button (click)=\"searchWaybill()\" [class.active]=\"showWaybill\">\n                        <mat-icon>search</mat-icon>\n                    </button>\n                </li>\n                <li class=\"sm-center\" *ngIf=\"options.showCenter\" >\n                    <span class=\"line-spinner mob-center\" *ngIf=\"!centerLoader\"></span> \n                     <button class=\"dlv-icon\" mat-icon-button (click)=\"searchCenterMob()\" [class.active]=\"showCenter\" *ngIf=\"centerLoader\">\n                    <mat-icon>store_mall_directory</mat-icon>\n                    </button>\n                </li>\n                <li class=\"sm-more\" *ngIf=\"isMobServicesHidden || options.showNotifications\">\n                    <mat-menu #appMenu=\"matMenu\">\n                    <button mat-menu-item [class.hide]=\"isServiceLoader\" *ngIf=\"options.showServices && isMobServicesHidden\" (click)=\"openMobOverlay()\">Menu</button>\n                    <button mat-menu-item  *ngIf=\"options.showNotifications\">Notification</button>\n                    </mat-menu>\n\n                    <button mat-icon-button [matMenuTriggerFor]=\"appMenu\" class=\"dlv-icon\">\n                    <mat-icon (click)=\"moreOptions()\">more_vert</mat-icon>\n                    </button>\n                </li>\n            </ul>\n        </div>\n        <div class=\"mob-dropdown\">\n        <div class=\"waybill-menu-mob\" [class.showWaybill]=\"showWaybill\" (clickOutside)=\"closeWaybill($event)\">\n            <dlv-mat-waybill-search [placeHolder]=\"searchPlaceholder\" [isAutoFocus]=\"waybillAutofocus\"></dlv-mat-waybill-search>\n        </div>\n        <div class=\"service-menu-mob\" [class.showCenter]=\"showCenter\" (clickOutside)=\"closeCenterDropMob($event)\">\n            <dlv-mat-selected-center *ngIf=\"isAllCenter || centerIDArray.length > 1\" [isAllCenter]=\"isAllCenter\" [open]=\"showCenter\"  (onCenterChange)=\"centerChange($event)\"></dlv-mat-selected-center>\n        </div>\n    </div>\n    </div>\n    <div class=\"sm-menu\">\n        <dlv-mat-services-menu-overlay *ngIf=\"checkLength(profile)\" [open]=\"showMenuOverlay\" [profile]=\"profile\" (onError)=\"showError($event)\" (clickOutside)=\"closeOverlay($event)\" ></dlv-mat-services-menu-overlay>\n    </div>\n\n     <div>\n        <dlv-mat-center-modal *ngIf=\"loadModal\" [isAllCenter]=\"isAllCenter\" [open]=\"loadModal\" (onCenterChange)=\"centerChange($event)\"></dlv-mat-center-modal>\n    </div>\n  ",
            styles: ["\n    .disabled{pointer-events:none;opacity:0.5}[disabled='true']{pointer-events:none;opacity:0.5}[hidden],.hide{display:none !important}.show{display:block !important}.dlv-icon{color:#BEC0C1 !important;transition:0.3s linear}.dlv-icon:hover{color:#262727 !important}.dlv-icon:active{color:#EF4136 !important}.service-menu-section{width:100%;height:40px}.service-menu-section .child-section{text-align:left;display:table}.service-menu-section .open{color:#F0503C}.service-menu-section.invert{color:#fff}.service-menu-section.invert .open{color:#fff}.service-menu-section.invert .line-spinner{border:2px solid #fff;border-top:2px solid rgba(255,0,0,0)}.service-menu-section .service-menu{text-align:center;margin:0px 20px;width:40px}.service-menu-section .service-menu span.material-icons{color:#b5b5b5}.service-menu-section .image{float:left}.service-menu-section .img-wrapper{height:30px;width:30px}.service-menu-section .waybill-search{position:relative}.service-menu-section .selected-center{min-width:200px;text-align:left;position:relative;background:rgba(0,0,0,0.06);border-radius:3px;margin:6px 15px}.service-menu-section .selected-center .centerName-cont{float:left}.service-menu-section .selected-center .name{float:left;font-family:OpenSans-Semibold;font-weight:600;font-size:13px;color:#505252;margin-left:16px}.service-menu-section .selected-center .centerName{margin:0}.service-menu-section .selected-center .centerName .select-dropdown{cursor:pointer;position:absolute;right:7px;top:7px;color:#929696}.service-menu-section .selected-center .select-drop-down{position:absolute;left:0;width:100%}.service-menu-section .selected-center .icon-pdown{font-size:.8em}.service-menu-section .selected-center p{line-height:14px}.service-menu-section .selected-center .line-spinner{position:absolute;left:50%;top:30%;transform:translate(-50%, -50%)}.service-menu-section .service-menu-overlay{line-height:14px}.service-menu-section .service-menu-overlay span{cursor:pointer}.service-menu-section .service-menu-overlay .icon-pdown{font-size:.8em;display:inline-block;transition:all 0.3s}.service-menu-section .service-menu-overlay .serviceBtn{cursor:pointer;margin-left:10px}.service-menu-section .service-menu-overlay.open{position:relative}.service-menu-section .service-menu-overlay.open .icon-pdown{font-size:.8em;-ms-transform:rotate(-180deg);-webkit-transform:rotate(-180deg);transform:rotate(-180deg)}.service-menu-section .service-menu-overlay.open .serviceBtn{font-weight:inherit;color:#ef4136 !important}.service-menu-section .service-menu-overlay.open::after{width:0;height:0;border-style:solid;border-width:0 12px 12px 12px;border-color:transparent transparent #fafafa transparent;content:'';bottom:-24px;left:8px;position:absolute;z-index:9999}.service-menu-section .service-menu-overlay span.line-spinner{margin:18px}.service-menu-section .service-menu-header{background:#2f3748;width:100%;height:50px;color:#fff}.service-menu-section .service-menu-inner{display:flex;justify-content:space-around;width:100%;margin:0px 10px}.service-menu-header{background:#2f3748;width:100%;height:50px;color:#fff}.cursor-pointer{cursor:pointer}.line-spinner{border:2px solid #000;border-top:2px solid rgba(255,0,0,0);border-radius:50%;width:10px;height:10px;-webkit-animation:spin 2s linear infinite;animation:spin 1s linear infinite;display:-webkit-box;vertical-align:middle}@keyframes spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}p{margin:12px 0}.header__notifications{display:flex;justify-content:space-between;margin:0px auto;padding-top:3px}.header__notifications i{flex:1;text-align:center;margin:12px}.mat-icon-button[aria-expanded=\"true\"],mat-icon.dlv-icon.mat-icon[aria-expanded=\"true\"]{color:#ef4136 !important}.waybill-menu-mob,.service-menu-mob{display:none}.showWaybill,.showCenter{display:block !important}.mob-dropdown{width:calc(100% - 16px);position:absolute;left:0;z-index:-1;margin-top:47px;box-shadow:2px 2px 4px rgba(0,0,0,0.07)}button.mat-icon-button.active{color:#ef4136 !important}span.line-spinner.mob-center{margin:13px}@media screen and (max-width: 640px){.service-menu-section{height:auto;margin:0 !important;padding:5px 10px}.service-menu-section .service-menu-inner{display:block}.service-menu-section .service-menu-inner .service-menu{text-align:center;width:100%}.service-menu-section .service-menu-inner .waybill-search{position:relative;width:100%}.service-menu-section .service-menu-inner .selected-center{min-width:240px;width:100%;text-align:center;position:relative}.service-menu-section .service-menu-inner .child-section{display:block;text-align:left}.service-menu-section .service-menu-inner .child-section .label{padding-left:0}}@media screen and (min-width: 1200px){.service-menu-section .waybill-search,.service-menu-section .selected-center{width:340px}.service-menu-mobile,.menu-dropdown,.sm-menu,.sm-ask-center,.mob-dropdown{display:none !important}}@media screen and (max-width: 1200px){.service-menu-mobile,.menu-dropdown,.sm-menu,.sm-ask-center,.mob-dropdown{display:none !important}}@media screen and (max-width: 992px){.service-menu-mobile,.menu-dropdown,.sm-menu,.sm-ask-center,.mob-dropdown{display:none !important}.service-menu-section .service-menu{margin:0px 10px;width:100%}.service-menu-section .name{overflow:hidden;width:110px;text-overflow:ellipsis;display:inline-block;height:1.2em;white-space:nowrap}}@media screen and (max-width: 768px){.service-menu-section .service-menu-inner{display:none !important}/deep/.waybill-menu{max-width:100vw !important;width:100vw !important;margin-top:7px}button.mat-icon-button[aria-expanded=\"true\"]{color:#ef4136}.menu-dropdown.show,.sm-menu,.sm-ask-center,.mob-dropdown{display:block !important}.service-menu-mobile{display:block !important;float:right;position:absolute;right:20px}.service-menu-mobile .sm-icons{display:inline-flex}.service-menu-mobile .sm-icons li{list-style:none}.service-menu-mobile .sm-icons li mat-icon.active{color:#ef4136}.service-menu-mobile .sm-icons li i{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px !important;margin:0 auto;text-align:center}.menu-dropdown{position:absolute;width:calc(100% - 20px);left:0;top:60px;background:#fff}.menu-dropdown .sm-waybill{box-shadow:2px 2px 4px #00000012;padding:2px;display:none;margin:-2px}.menu-dropdown .sm-center{display:none}.arrowBroder{display:none}}\n  "]
        }),
        __metadata("design:paramtypes", [CookiesService,
            AuthService,
            MatMenuService,
            PermissionService,
            MatCenterService])
    ], DlvMatServicesMenuComponent);
    return DlvMatServicesMenuComponent;
}());
export { DlvMatServicesMenuComponent };
//# sourceMappingURL=services-menu.component.js.map