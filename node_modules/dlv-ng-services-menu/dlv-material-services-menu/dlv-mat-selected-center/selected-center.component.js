var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { CookiesService, MatCenterService, MatMenuService } from '../shared/services';
var DlvMatCenterComponent = /** @class */ (function () {
    function DlvMatCenterComponent(centerService, menuService, cookies) {
        this.centerService = centerService;
        this.menuService = menuService;
        this.cookies = cookies;
        this.onCenterChange = new EventEmitter();
        this.closeDropdown = new EventEmitter();
        this.env = this.menuService.getOptions()['environment'];
    }
    DlvMatCenterComponent.prototype.ngOnInit = function () {
    };
    DlvMatCenterComponent.prototype.ngDoCheck = function () {
        if (this.centerService.centersArray()) {
            this.centerDetails = this.centerService.constructingCenterObject();
            this.centerService.setCheckModel(true);
        }
    };
    /**
     * @name selectCenter
     * @description this function is used to select center from search dropdown and storing it into cookies as well as show the status 'new', close dropdown and emit the selected center
     * @param center : this is containing select center code and center name
     */
    DlvMatCenterComponent.prototype.selectCenter = function (center) {
        this.centerService.processSelectCenter(center);
        this.closeDropdown.emit(false);
        this.onCenterChange.emit(center);
    };
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], DlvMatCenterComponent.prototype, "open", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], DlvMatCenterComponent.prototype, "isAllCenter", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DlvMatCenterComponent.prototype, "onCenterChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], DlvMatCenterComponent.prototype, "closeDropdown", void 0);
    DlvMatCenterComponent = __decorate([
        Component({
            selector: 'dlv-mat-selected-center',
            template: "\n    <div class=\"dropdown\">\n        <div class=\"arrowBroder\" *ngIf=\"open\"></div>\n        <div class=\"dropdown-content\" [ngClass]=\"{'open' : open}\">\n            <div>\n                <dlv-mat-auto-complete-center placeholder=\"Search Center\" (onCenterChange)=\"selectCenter($event)\" [open]=\"open\"></dlv-mat-auto-complete-center>\n            </div>\n        </div>\n    </div>\n  ",
            styles: ["\n    .dropdown{position:relative;text-align:left;width:100%}.dropdown .arrowBroder{font-size:0px;line-height:0%;width:0px;border-bottom:12px solid #f9f9f9;border-left:10px solid rgba(0,0,0,0);border-right:10px solid rgba(0,0,0,0);left:0;right:0;position:absolute;margin:0 auto;top:-10px}.dropdown .dropdown-content{padding:8px;width:calc(100% - 16px);display:none;position:absolute;background-color:#f9f9f9;min-width:200px;overflow:auto;left:0;right:0;margin:0 auto;box-shadow:2px 2px 6px rgba(0,0,0,0.2);z-index:1;border-radius:3px}.dropdown .dropdown-content p.no-result{margin:0 0 10px;color:#000}.dropdown .dropdown-content .center-form-search{position:relative}.dropdown .dropdown-content .center-form-search span{position:absolute;right:8px;top:8px;color:#808080}.dropdown .dropdown-content .search-center{width:calc(100% - 10px);padding:3px 5px;border:none;box-shadow:none !important;border-radius:0;border-bottom:1px solid #a6a6a6;font-size:12px;line-height:21px;color:#414042;margin-bottom:10px;background:transparent}.dropdown .dropdown-content .search-center:focus{border-color:red;outline:none;box-shadow:none}.dropdown .dropdown-content .center-list{margin:0 0;border-radius:1px;font-size:12px;color:#414042;background:none;padding:0;margin:0;max-height:140px;text-align:left;overflow-y:auto;width:100%}.dropdown .dropdown-content .center-list .center-name-list{list-style:none;margin-bottom:4px;width:calc(100% - 10px);cursor:pointer;font-size:14px;padding:4px 5px;display:block;border-bottom:1px dashed #cccccc;transition:all 0.3s linear}.dropdown .dropdown-content .center-list .center-name-list:hover{background:#ececec}.dropdown .dropdown-content.open{display:block !important}@media screen and (max-width: 768px){.arrowBroder{display:none}.dropdown .dropdown-content{position:relative;box-shadow:none}.dropdown .dropdown-content.open{padding:6px;margin:0;background:#fff;box-shadow:inset 1px 1px 4px rgba(0,0,0,0.18)}}\n  "]
        }),
        __metadata("design:paramtypes", [MatCenterService, MatMenuService, CookiesService])
    ], DlvMatCenterComponent);
    return DlvMatCenterComponent;
}());
export { DlvMatCenterComponent };
//# sourceMappingURL=selected-center.component.js.map